
BMT_HIDROCAR_PROJE_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080040b0  080040b0  000050b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000068  20000000  080040b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000022c  20000068  08004120  00006068  2**2
                  ALLOC
  5 ._user_heap_stack 00000804  20000294  08004120  00006294  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
  7 .comment      00000043  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
  8 .debug_info   00007ffb  00000000  00000000  000060d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000160b  00000000  00000000  0000e0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000006e0  00000000  00000000  0000f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 0000053c  00000000  00000000  0000fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00013735  00000000  00000000  000102fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000097a2  00000000  00000000  00023a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000765dd  00000000  00000000  0002d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000236c  00000000  00000000  000a37b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000006d  00000000  00000000  000a5b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <strlen>:
 80000c0:	2300      	movs	r3, #0
 80000c2:	5cc2      	ldrb	r2, [r0, r3]
 80000c4:	3301      	adds	r3, #1
 80000c6:	2a00      	cmp	r2, #0
 80000c8:	d1fb      	bne.n	80000c2 <strlen+0x2>
 80000ca:	1e58      	subs	r0, r3, #1
 80000cc:	4770      	bx	lr
	...

080000d0 <__gnu_thumb1_case_shi>:
 80000d0:	b403      	push	{r0, r1}
 80000d2:	4671      	mov	r1, lr
 80000d4:	0849      	lsrs	r1, r1, #1
 80000d6:	0040      	lsls	r0, r0, #1
 80000d8:	0049      	lsls	r1, r1, #1
 80000da:	5e09      	ldrsh	r1, [r1, r0]
 80000dc:	0049      	lsls	r1, r1, #1
 80000de:	448e      	add	lr, r1
 80000e0:	bc03      	pop	{r0, r1}
 80000e2:	4770      	bx	lr

080000e4 <__udivsi3>:
 80000e4:	2200      	movs	r2, #0
 80000e6:	0843      	lsrs	r3, r0, #1
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d374      	bcc.n	80001d6 <__udivsi3+0xf2>
 80000ec:	0903      	lsrs	r3, r0, #4
 80000ee:	428b      	cmp	r3, r1
 80000f0:	d35f      	bcc.n	80001b2 <__udivsi3+0xce>
 80000f2:	0a03      	lsrs	r3, r0, #8
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d344      	bcc.n	8000182 <__udivsi3+0x9e>
 80000f8:	0b03      	lsrs	r3, r0, #12
 80000fa:	428b      	cmp	r3, r1
 80000fc:	d328      	bcc.n	8000150 <__udivsi3+0x6c>
 80000fe:	0c03      	lsrs	r3, r0, #16
 8000100:	428b      	cmp	r3, r1
 8000102:	d30d      	bcc.n	8000120 <__udivsi3+0x3c>
 8000104:	22ff      	movs	r2, #255	@ 0xff
 8000106:	0209      	lsls	r1, r1, #8
 8000108:	ba12      	rev	r2, r2
 800010a:	0c03      	lsrs	r3, r0, #16
 800010c:	428b      	cmp	r3, r1
 800010e:	d302      	bcc.n	8000116 <__udivsi3+0x32>
 8000110:	1212      	asrs	r2, r2, #8
 8000112:	0209      	lsls	r1, r1, #8
 8000114:	d065      	beq.n	80001e2 <__udivsi3+0xfe>
 8000116:	0b03      	lsrs	r3, r0, #12
 8000118:	428b      	cmp	r3, r1
 800011a:	d319      	bcc.n	8000150 <__udivsi3+0x6c>
 800011c:	e000      	b.n	8000120 <__udivsi3+0x3c>
 800011e:	0a09      	lsrs	r1, r1, #8
 8000120:	0bc3      	lsrs	r3, r0, #15
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x46>
 8000126:	03cb      	lsls	r3, r1, #15
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0b83      	lsrs	r3, r0, #14
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x52>
 8000132:	038b      	lsls	r3, r1, #14
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0b43      	lsrs	r3, r0, #13
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x5e>
 800013e:	034b      	lsls	r3, r1, #13
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x6a>
 800014a:	030b      	lsls	r3, r1, #12
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0ac3      	lsrs	r3, r0, #11
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x76>
 8000156:	02cb      	lsls	r3, r1, #11
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0a83      	lsrs	r3, r0, #10
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x82>
 8000162:	028b      	lsls	r3, r1, #10
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0a43      	lsrs	r3, r0, #9
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x8e>
 800016e:	024b      	lsls	r3, r1, #9
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a03      	lsrs	r3, r0, #8
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x9a>
 800017a:	020b      	lsls	r3, r1, #8
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	d2cd      	bcs.n	800011e <__udivsi3+0x3a>
 8000182:	09c3      	lsrs	r3, r0, #7
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xa8>
 8000188:	01cb      	lsls	r3, r1, #7
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0983      	lsrs	r3, r0, #6
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xb4>
 8000194:	018b      	lsls	r3, r1, #6
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0943      	lsrs	r3, r0, #5
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xc0>
 80001a0:	014b      	lsls	r3, r1, #5
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0903      	lsrs	r3, r0, #4
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xcc>
 80001ac:	010b      	lsls	r3, r1, #4
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	08c3      	lsrs	r3, r0, #3
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xd8>
 80001b8:	00cb      	lsls	r3, r1, #3
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0883      	lsrs	r3, r0, #2
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xe4>
 80001c4:	008b      	lsls	r3, r1, #2
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0843      	lsrs	r3, r0, #1
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xf0>
 80001d0:	004b      	lsls	r3, r1, #1
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	1a41      	subs	r1, r0, r1
 80001d8:	d200      	bcs.n	80001dc <__udivsi3+0xf8>
 80001da:	4601      	mov	r1, r0
 80001dc:	4152      	adcs	r2, r2
 80001de:	4610      	mov	r0, r2
 80001e0:	4770      	bx	lr
 80001e2:	e7ff      	b.n	80001e4 <__udivsi3+0x100>
 80001e4:	b501      	push	{r0, lr}
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 f8f0 	bl	80003cc <__aeabi_idiv0>
 80001ec:	bd02      	pop	{r1, pc}
 80001ee:	46c0      	nop			@ (mov r8, r8)

080001f0 <__aeabi_uidivmod>:
 80001f0:	2900      	cmp	r1, #0
 80001f2:	d0f7      	beq.n	80001e4 <__udivsi3+0x100>
 80001f4:	e776      	b.n	80000e4 <__udivsi3>
 80001f6:	4770      	bx	lr

080001f8 <__divsi3>:
 80001f8:	4603      	mov	r3, r0
 80001fa:	430b      	orrs	r3, r1
 80001fc:	d47f      	bmi.n	80002fe <__divsi3+0x106>
 80001fe:	2200      	movs	r2, #0
 8000200:	0843      	lsrs	r3, r0, #1
 8000202:	428b      	cmp	r3, r1
 8000204:	d374      	bcc.n	80002f0 <__divsi3+0xf8>
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d35f      	bcc.n	80002cc <__divsi3+0xd4>
 800020c:	0a03      	lsrs	r3, r0, #8
 800020e:	428b      	cmp	r3, r1
 8000210:	d344      	bcc.n	800029c <__divsi3+0xa4>
 8000212:	0b03      	lsrs	r3, r0, #12
 8000214:	428b      	cmp	r3, r1
 8000216:	d328      	bcc.n	800026a <__divsi3+0x72>
 8000218:	0c03      	lsrs	r3, r0, #16
 800021a:	428b      	cmp	r3, r1
 800021c:	d30d      	bcc.n	800023a <__divsi3+0x42>
 800021e:	22ff      	movs	r2, #255	@ 0xff
 8000220:	0209      	lsls	r1, r1, #8
 8000222:	ba12      	rev	r2, r2
 8000224:	0c03      	lsrs	r3, r0, #16
 8000226:	428b      	cmp	r3, r1
 8000228:	d302      	bcc.n	8000230 <__divsi3+0x38>
 800022a:	1212      	asrs	r2, r2, #8
 800022c:	0209      	lsls	r1, r1, #8
 800022e:	d065      	beq.n	80002fc <__divsi3+0x104>
 8000230:	0b03      	lsrs	r3, r0, #12
 8000232:	428b      	cmp	r3, r1
 8000234:	d319      	bcc.n	800026a <__divsi3+0x72>
 8000236:	e000      	b.n	800023a <__divsi3+0x42>
 8000238:	0a09      	lsrs	r1, r1, #8
 800023a:	0bc3      	lsrs	r3, r0, #15
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__divsi3+0x4c>
 8000240:	03cb      	lsls	r3, r1, #15
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0b83      	lsrs	r3, r0, #14
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__divsi3+0x58>
 800024c:	038b      	lsls	r3, r1, #14
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0b43      	lsrs	r3, r0, #13
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__divsi3+0x64>
 8000258:	034b      	lsls	r3, r1, #13
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x70>
 8000264:	030b      	lsls	r3, r1, #12
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0ac3      	lsrs	r3, r0, #11
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x7c>
 8000270:	02cb      	lsls	r3, r1, #11
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0a83      	lsrs	r3, r0, #10
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x88>
 800027c:	028b      	lsls	r3, r1, #10
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0a43      	lsrs	r3, r0, #9
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x94>
 8000288:	024b      	lsls	r3, r1, #9
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0a03      	lsrs	r3, r0, #8
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0xa0>
 8000294:	020b      	lsls	r3, r1, #8
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	d2cd      	bcs.n	8000238 <__divsi3+0x40>
 800029c:	09c3      	lsrs	r3, r0, #7
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__divsi3+0xae>
 80002a2:	01cb      	lsls	r3, r1, #7
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	0983      	lsrs	r3, r0, #6
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d301      	bcc.n	80002b2 <__divsi3+0xba>
 80002ae:	018b      	lsls	r3, r1, #6
 80002b0:	1ac0      	subs	r0, r0, r3
 80002b2:	4152      	adcs	r2, r2
 80002b4:	0943      	lsrs	r3, r0, #5
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d301      	bcc.n	80002be <__divsi3+0xc6>
 80002ba:	014b      	lsls	r3, r1, #5
 80002bc:	1ac0      	subs	r0, r0, r3
 80002be:	4152      	adcs	r2, r2
 80002c0:	0903      	lsrs	r3, r0, #4
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xd2>
 80002c6:	010b      	lsls	r3, r1, #4
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	08c3      	lsrs	r3, r0, #3
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xde>
 80002d2:	00cb      	lsls	r3, r1, #3
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xea>
 80002de:	008b      	lsls	r3, r1, #2
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0843      	lsrs	r3, r0, #1
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xf6>
 80002ea:	004b      	lsls	r3, r1, #1
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	1a41      	subs	r1, r0, r1
 80002f2:	d200      	bcs.n	80002f6 <__divsi3+0xfe>
 80002f4:	4601      	mov	r1, r0
 80002f6:	4152      	adcs	r2, r2
 80002f8:	4610      	mov	r0, r2
 80002fa:	4770      	bx	lr
 80002fc:	e05d      	b.n	80003ba <__divsi3+0x1c2>
 80002fe:	0fca      	lsrs	r2, r1, #31
 8000300:	d000      	beq.n	8000304 <__divsi3+0x10c>
 8000302:	4249      	negs	r1, r1
 8000304:	1003      	asrs	r3, r0, #32
 8000306:	d300      	bcc.n	800030a <__divsi3+0x112>
 8000308:	4240      	negs	r0, r0
 800030a:	4053      	eors	r3, r2
 800030c:	2200      	movs	r2, #0
 800030e:	469c      	mov	ip, r3
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d32d      	bcc.n	8000372 <__divsi3+0x17a>
 8000316:	0a03      	lsrs	r3, r0, #8
 8000318:	428b      	cmp	r3, r1
 800031a:	d312      	bcc.n	8000342 <__divsi3+0x14a>
 800031c:	22fc      	movs	r2, #252	@ 0xfc
 800031e:	0189      	lsls	r1, r1, #6
 8000320:	ba12      	rev	r2, r2
 8000322:	0a03      	lsrs	r3, r0, #8
 8000324:	428b      	cmp	r3, r1
 8000326:	d30c      	bcc.n	8000342 <__divsi3+0x14a>
 8000328:	0189      	lsls	r1, r1, #6
 800032a:	1192      	asrs	r2, r2, #6
 800032c:	428b      	cmp	r3, r1
 800032e:	d308      	bcc.n	8000342 <__divsi3+0x14a>
 8000330:	0189      	lsls	r1, r1, #6
 8000332:	1192      	asrs	r2, r2, #6
 8000334:	428b      	cmp	r3, r1
 8000336:	d304      	bcc.n	8000342 <__divsi3+0x14a>
 8000338:	0189      	lsls	r1, r1, #6
 800033a:	d03a      	beq.n	80003b2 <__divsi3+0x1ba>
 800033c:	1192      	asrs	r2, r2, #6
 800033e:	e000      	b.n	8000342 <__divsi3+0x14a>
 8000340:	0989      	lsrs	r1, r1, #6
 8000342:	09c3      	lsrs	r3, r0, #7
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x154>
 8000348:	01cb      	lsls	r3, r1, #7
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0983      	lsrs	r3, r0, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0x160>
 8000354:	018b      	lsls	r3, r1, #6
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	0943      	lsrs	r3, r0, #5
 800035c:	428b      	cmp	r3, r1
 800035e:	d301      	bcc.n	8000364 <__divsi3+0x16c>
 8000360:	014b      	lsls	r3, r1, #5
 8000362:	1ac0      	subs	r0, r0, r3
 8000364:	4152      	adcs	r2, r2
 8000366:	0903      	lsrs	r3, r0, #4
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x178>
 800036c:	010b      	lsls	r3, r1, #4
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	08c3      	lsrs	r3, r0, #3
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x184>
 8000378:	00cb      	lsls	r3, r1, #3
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0883      	lsrs	r3, r0, #2
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x190>
 8000384:	008b      	lsls	r3, r1, #2
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	d2d9      	bcs.n	8000340 <__divsi3+0x148>
 800038c:	0843      	lsrs	r3, r0, #1
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0x19e>
 8000392:	004b      	lsls	r3, r1, #1
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	1a41      	subs	r1, r0, r1
 800039a:	d200      	bcs.n	800039e <__divsi3+0x1a6>
 800039c:	4601      	mov	r1, r0
 800039e:	4663      	mov	r3, ip
 80003a0:	4152      	adcs	r2, r2
 80003a2:	105b      	asrs	r3, r3, #1
 80003a4:	4610      	mov	r0, r2
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x1b4>
 80003a8:	4240      	negs	r0, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d500      	bpl.n	80003b0 <__divsi3+0x1b8>
 80003ae:	4249      	negs	r1, r1
 80003b0:	4770      	bx	lr
 80003b2:	4663      	mov	r3, ip
 80003b4:	105b      	asrs	r3, r3, #1
 80003b6:	d300      	bcc.n	80003ba <__divsi3+0x1c2>
 80003b8:	4240      	negs	r0, r0
 80003ba:	b501      	push	{r0, lr}
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 f805 	bl	80003cc <__aeabi_idiv0>
 80003c2:	bd02      	pop	{r1, pc}

080003c4 <__aeabi_idivmod>:
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d0f8      	beq.n	80003ba <__divsi3+0x1c2>
 80003c8:	e716      	b.n	80001f8 <__divsi3>
 80003ca:	4770      	bx	lr

080003cc <__aeabi_idiv0>:
 80003cc:	4770      	bx	lr
 80003ce:	46c0      	nop			@ (mov r8, r8)

080003d0 <__aeabi_uldivmod>:
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d111      	bne.n	80003f8 <__aeabi_uldivmod+0x28>
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	d10f      	bne.n	80003f8 <__aeabi_uldivmod+0x28>
 80003d8:	2900      	cmp	r1, #0
 80003da:	d100      	bne.n	80003de <__aeabi_uldivmod+0xe>
 80003dc:	2800      	cmp	r0, #0
 80003de:	d002      	beq.n	80003e6 <__aeabi_uldivmod+0x16>
 80003e0:	2100      	movs	r1, #0
 80003e2:	43c9      	mvns	r1, r1
 80003e4:	0008      	movs	r0, r1
 80003e6:	b407      	push	{r0, r1, r2}
 80003e8:	4802      	ldr	r0, [pc, #8]	@ (80003f4 <__aeabi_uldivmod+0x24>)
 80003ea:	a102      	add	r1, pc, #8	@ (adr r1, 80003f4 <__aeabi_uldivmod+0x24>)
 80003ec:	1840      	adds	r0, r0, r1
 80003ee:	9002      	str	r0, [sp, #8]
 80003f0:	bd03      	pop	{r0, r1, pc}
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	ffffffd9 	.word	0xffffffd9
 80003f8:	b403      	push	{r0, r1}
 80003fa:	4668      	mov	r0, sp
 80003fc:	b501      	push	{r0, lr}
 80003fe:	9802      	ldr	r0, [sp, #8]
 8000400:	f000 f834 	bl	800046c <__udivmoddi4>
 8000404:	9b01      	ldr	r3, [sp, #4]
 8000406:	469e      	mov	lr, r3
 8000408:	b002      	add	sp, #8
 800040a:	bc0c      	pop	{r2, r3}
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_lmul>:
 8000410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000412:	46ce      	mov	lr, r9
 8000414:	4699      	mov	r9, r3
 8000416:	0c03      	lsrs	r3, r0, #16
 8000418:	469c      	mov	ip, r3
 800041a:	0413      	lsls	r3, r2, #16
 800041c:	4647      	mov	r7, r8
 800041e:	0c1b      	lsrs	r3, r3, #16
 8000420:	001d      	movs	r5, r3
 8000422:	000e      	movs	r6, r1
 8000424:	4661      	mov	r1, ip
 8000426:	0404      	lsls	r4, r0, #16
 8000428:	0c24      	lsrs	r4, r4, #16
 800042a:	b580      	push	{r7, lr}
 800042c:	0007      	movs	r7, r0
 800042e:	0c10      	lsrs	r0, r2, #16
 8000430:	434b      	muls	r3, r1
 8000432:	4365      	muls	r5, r4
 8000434:	4341      	muls	r1, r0
 8000436:	4360      	muls	r0, r4
 8000438:	0c2c      	lsrs	r4, r5, #16
 800043a:	18c0      	adds	r0, r0, r3
 800043c:	1824      	adds	r4, r4, r0
 800043e:	468c      	mov	ip, r1
 8000440:	42a3      	cmp	r3, r4
 8000442:	d903      	bls.n	800044c <__aeabi_lmul+0x3c>
 8000444:	2380      	movs	r3, #128	@ 0x80
 8000446:	025b      	lsls	r3, r3, #9
 8000448:	4698      	mov	r8, r3
 800044a:	44c4      	add	ip, r8
 800044c:	4649      	mov	r1, r9
 800044e:	4379      	muls	r1, r7
 8000450:	4356      	muls	r6, r2
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	042d      	lsls	r5, r5, #16
 8000456:	0c2d      	lsrs	r5, r5, #16
 8000458:	1989      	adds	r1, r1, r6
 800045a:	4463      	add	r3, ip
 800045c:	0424      	lsls	r4, r4, #16
 800045e:	1960      	adds	r0, r4, r5
 8000460:	18c9      	adds	r1, r1, r3
 8000462:	bcc0      	pop	{r6, r7}
 8000464:	46b9      	mov	r9, r7
 8000466:	46b0      	mov	r8, r6
 8000468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f000 f8ba 	bl	8000604 <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f000 f8b5 	bl	8000604 <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	d434      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a2:	469b      	mov	fp, r3
 80004a4:	4653      	mov	r3, sl
 80004a6:	465a      	mov	r2, fp
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83b      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e079      	b.n	80005b2 <__udivmoddi4+0x146>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e076      	b.n	80005b8 <__udivmoddi4+0x14c>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e029      	b.n	8000538 <__udivmoddi4+0xcc>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	469b      	mov	fp, r3
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	4652      	mov	r2, sl
 8000516:	40da      	lsrs	r2, r3
 8000518:	4641      	mov	r1, r8
 800051a:	0013      	movs	r3, r2
 800051c:	464a      	mov	r2, r9
 800051e:	408a      	lsls	r2, r1
 8000520:	0017      	movs	r7, r2
 8000522:	4642      	mov	r2, r8
 8000524:	431f      	orrs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d9c3      	bls.n	80004b8 <__udivmoddi4+0x4c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4643      	mov	r3, r8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0d8      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053e:	07fb      	lsls	r3, r7, #31
 8000540:	0872      	lsrs	r2, r6, #1
 8000542:	431a      	orrs	r2, r3
 8000544:	4646      	mov	r6, r8
 8000546:	087b      	lsrs	r3, r7, #1
 8000548:	e00e      	b.n	8000568 <__udivmoddi4+0xfc>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d101      	bne.n	8000552 <__udivmoddi4+0xe6>
 800054e:	42a2      	cmp	r2, r4
 8000550:	d80c      	bhi.n	800056c <__udivmoddi4+0x100>
 8000552:	1aa4      	subs	r4, r4, r2
 8000554:	419d      	sbcs	r5, r3
 8000556:	2001      	movs	r0, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2100      	movs	r1, #0
 800055e:	3e01      	subs	r6, #1
 8000560:	1824      	adds	r4, r4, r0
 8000562:	414d      	adcs	r5, r1
 8000564:	2e00      	cmp	r6, #0
 8000566:	d006      	beq.n	8000576 <__udivmoddi4+0x10a>
 8000568:	42ab      	cmp	r3, r5
 800056a:	d9ee      	bls.n	800054a <__udivmoddi4+0xde>
 800056c:	3e01      	subs	r6, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1f8      	bne.n	8000568 <__udivmoddi4+0xfc>
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	465b      	mov	r3, fp
 800057c:	1900      	adds	r0, r0, r4
 800057e:	4169      	adcs	r1, r5
 8000580:	2b00      	cmp	r3, #0
 8000582:	db24      	blt.n	80005ce <__udivmoddi4+0x162>
 8000584:	002b      	movs	r3, r5
 8000586:	465a      	mov	r2, fp
 8000588:	4644      	mov	r4, r8
 800058a:	40d3      	lsrs	r3, r2
 800058c:	002a      	movs	r2, r5
 800058e:	40e2      	lsrs	r2, r4
 8000590:	001c      	movs	r4, r3
 8000592:	465b      	mov	r3, fp
 8000594:	0015      	movs	r5, r2
 8000596:	2b00      	cmp	r3, #0
 8000598:	db2a      	blt.n	80005f0 <__udivmoddi4+0x184>
 800059a:	0026      	movs	r6, r4
 800059c:	409e      	lsls	r6, r3
 800059e:	0033      	movs	r3, r6
 80005a0:	0026      	movs	r6, r4
 80005a2:	4647      	mov	r7, r8
 80005a4:	40be      	lsls	r6, r7
 80005a6:	0032      	movs	r2, r6
 80005a8:	1a80      	subs	r0, r0, r2
 80005aa:	4199      	sbcs	r1, r3
 80005ac:	9000      	str	r0, [sp, #0]
 80005ae:	9101      	str	r1, [sp, #4]
 80005b0:	e79e      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	d8bc      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80005b6:	e782      	b.n	80004be <__udivmoddi4+0x52>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	9100      	str	r1, [sp, #0]
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	e785      	b.n	80004da <__udivmoddi4+0x6e>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	4646      	mov	r6, r8
 80005d8:	409a      	lsls	r2, r3
 80005da:	0023      	movs	r3, r4
 80005dc:	40f3      	lsrs	r3, r6
 80005de:	4644      	mov	r4, r8
 80005e0:	4313      	orrs	r3, r2
 80005e2:	002a      	movs	r2, r5
 80005e4:	40e2      	lsrs	r2, r4
 80005e6:	001c      	movs	r4, r3
 80005e8:	465b      	mov	r3, fp
 80005ea:	0015      	movs	r5, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dad4      	bge.n	800059a <__udivmoddi4+0x12e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	002f      	movs	r7, r5
 80005f4:	2320      	movs	r3, #32
 80005f6:	0026      	movs	r6, r4
 80005f8:	4097      	lsls	r7, r2
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	40de      	lsrs	r6, r3
 80005fe:	003b      	movs	r3, r7
 8000600:	4333      	orrs	r3, r6
 8000602:	e7cd      	b.n	80005a0 <__udivmoddi4+0x134>

08000604 <__clzdi2>:
 8000604:	b510      	push	{r4, lr}
 8000606:	2900      	cmp	r1, #0
 8000608:	d103      	bne.n	8000612 <__clzdi2+0xe>
 800060a:	f000 f807 	bl	800061c <__clzsi2>
 800060e:	3020      	adds	r0, #32
 8000610:	e002      	b.n	8000618 <__clzdi2+0x14>
 8000612:	0008      	movs	r0, r1
 8000614:	f000 f802 	bl	800061c <__clzsi2>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__clzsi2>:
 800061c:	211c      	movs	r1, #28
 800061e:	2301      	movs	r3, #1
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0xe>
 8000626:	0c00      	lsrs	r0, r0, #16
 8000628:	3910      	subs	r1, #16
 800062a:	0a1b      	lsrs	r3, r3, #8
 800062c:	4298      	cmp	r0, r3
 800062e:	d301      	bcc.n	8000634 <__clzsi2+0x18>
 8000630:	0a00      	lsrs	r0, r0, #8
 8000632:	3908      	subs	r1, #8
 8000634:	091b      	lsrs	r3, r3, #4
 8000636:	4298      	cmp	r0, r3
 8000638:	d301      	bcc.n	800063e <__clzsi2+0x22>
 800063a:	0900      	lsrs	r0, r0, #4
 800063c:	3904      	subs	r1, #4
 800063e:	a202      	add	r2, pc, #8	@ (adr r2, 8000648 <__clzsi2+0x2c>)
 8000640:	5c10      	ldrb	r0, [r2, r0]
 8000642:	1840      	adds	r0, r0, r1
 8000644:	4770      	bx	lr
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	02020304 	.word	0x02020304
 800064c:	01010101 	.word	0x01010101
	...

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_GPIO_Init+0x28>)
 8000660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <MX_GPIO_Init+0x28>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	62da      	str	r2, [r3, #44]	@ 0x2c
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <MX_GPIO_Init+0x28>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <uart_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//UART üzerinden string gönderme fonksiyonu
void uart_print(char *msg){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff fd16 	bl	80000c0 <strlen>
 8000694:	0003      	movs	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	425b      	negs	r3, r3
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	4803      	ldr	r0, [pc, #12]	@ (80006ac <uart_print+0x28>)
 80006a0:	f001 fc62 	bl	8001f68 <HAL_UART_Transmit>
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000b8 	.word	0x200000b8

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 f9ef 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f8af 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f7ff ffcb 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 f94b 	bl	800095c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  srand(HAL_GetTick()); 				// rastgele değer üreten fonksiyon
 80006c6:	f000 fa4d 	bl	8000b64 <HAL_GetTick>
 80006ca:	0003      	movs	r3, r0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 f9c1 	bl	8002a54 <srand>
  uart_print("time,temp,volt\r\n");     // CSV başlık satırı
 80006d2:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <main+0x144>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff ffd5 	bl	8000684 <uart_print>
  uint32_t count = 0;				    // değerleri 10 saniye boyunca almamızı sağlayacak sayaç
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(count < 100) 									// 10 saniye boyunca ölçüm yap
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b63      	cmp	r3, #99	@ 0x63
 80006e2:	d8fc      	bhi.n	80006de <main+0x2e>
	  {
		  HAL_Delay(100); 								// 100ms bekle
 80006e4:	2064      	movs	r0, #100	@ 0x64
 80006e6:	f000 fa47 	bl	8000b78 <HAL_Delay>
		  time_ms += 100;			   			   	    // toplam süreyi 100ms artır
 80006ea:	4b43      	ldr	r3, [pc, #268]	@ (80007f8 <main+0x148>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3364      	adds	r3, #100	@ 0x64
 80006f0:	001a      	movs	r2, r3
 80006f2:	4b41      	ldr	r3, [pc, #260]	@ (80007f8 <main+0x148>)
 80006f4:	601a      	str	r2, [r3, #0]
		  count++; 		               					// sayaçı 1 artır
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]

		  extreme_value = (rand() % 100 < 3);       // %3 ihtimalle sınırdışı değer üret
 80006fc:	f002 f9da 	bl	8002ab4 <rand>
 8000700:	0003      	movs	r3, r0
 8000702:	2164      	movs	r1, #100	@ 0x64
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff fe5d 	bl	80003c4 <__aeabi_idivmod>
 800070a:	000b      	movs	r3, r1
 800070c:	001a      	movs	r2, r3
 800070e:	2302      	movs	r3, #2
 8000710:	0fd0      	lsrs	r0, r2, #31
 8000712:	17d9      	asrs	r1, r3, #31
 8000714:	4293      	cmp	r3, r2
 8000716:	4148      	adcs	r0, r1
 8000718:	0003      	movs	r3, r0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	001a      	movs	r2, r3
 800071e:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <main+0x14c>)
 8000720:	601a      	str	r2, [r3, #0]
		  temp = 20 + rand() % 36;					// normal sıcaklık 20-55°C aralığında
 8000722:	f002 f9c7 	bl	8002ab4 <rand>
 8000726:	0003      	movs	r3, r0
 8000728:	2124      	movs	r1, #36	@ 0x24
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fe4a 	bl	80003c4 <__aeabi_idivmod>
 8000730:	000b      	movs	r3, r1
 8000732:	3314      	adds	r3, #20
 8000734:	001a      	movs	r2, r3
 8000736:	4b32      	ldr	r3, [pc, #200]	@ (8000800 <main+0x150>)
 8000738:	601a      	str	r2, [r3, #0]
		  if(extreme_value)
 800073a:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <main+0x14c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00b      	beq.n	800075a <main+0xaa>
			  temp = 56 + rand() % 10;					// sınırdışı durumda sıcaklık 56-65°C aralığında
 8000742:	f002 f9b7 	bl	8002ab4 <rand>
 8000746:	0003      	movs	r3, r0
 8000748:	210a      	movs	r1, #10
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff fe3a 	bl	80003c4 <__aeabi_idivmod>
 8000750:	000b      	movs	r3, r1
 8000752:	3338      	adds	r3, #56	@ 0x38
 8000754:	001a      	movs	r2, r3
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <main+0x150>)
 8000758:	601a      	str	r2, [r3, #0]

		  volt = 55 + rand() % 18;					// normal voltaj 55-72V aralığında
 800075a:	f002 f9ab 	bl	8002ab4 <rand>
 800075e:	0003      	movs	r3, r0
 8000760:	2112      	movs	r1, #18
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff fe2e 	bl	80003c4 <__aeabi_idivmod>
 8000768:	000b      	movs	r3, r1
 800076a:	3337      	adds	r3, #55	@ 0x37
 800076c:	001a      	movs	r2, r3
 800076e:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <main+0x154>)
 8000770:	601a      	str	r2, [r3, #0]
		  if(extreme_value)
 8000772:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <main+0x14c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00b      	beq.n	8000792 <main+0xe2>
			  volt = 50 + rand() % 5;					// sınırdışı durumda voltaj 50-54V aralığında
 800077a:	f002 f99b 	bl	8002ab4 <rand>
 800077e:	0003      	movs	r3, r0
 8000780:	2105      	movs	r1, #5
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff fe1e 	bl	80003c4 <__aeabi_idivmod>
 8000788:	000b      	movs	r3, r1
 800078a:	3332      	adds	r3, #50	@ 0x32
 800078c:	001a      	movs	r2, r3
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <main+0x154>)
 8000790:	601a      	str	r2, [r3, #0]

		  											//UART ile gönderilecek veriyi tutan buffer
		  sprintf(buffer, "%lu,%d,%d\r\n", time_ms, temp, volt); 		// CSV formatında string oluştur
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <main+0x148>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <main+0x150>)
 8000798:	681c      	ldr	r4, [r3, #0]
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <main+0x154>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	491a      	ldr	r1, [pc, #104]	@ (8000808 <main+0x158>)
 80007a0:	481a      	ldr	r0, [pc, #104]	@ (800080c <main+0x15c>)
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	0023      	movs	r3, r4
 80007a6:	f002 f933 	bl	8002a10 <siprintf>
		  uart_print(buffer);  											// UART üzerinden gönder
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <main+0x15c>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ff69 	bl	8000684 <uart_print>


		  //sınırdışı değerler için uyarılar

		  if(volt < 60 && temp > 50){
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <main+0x154>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b3b      	cmp	r3, #59	@ 0x3b
 80007b8:	dc08      	bgt.n	80007cc <main+0x11c>
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <main+0x150>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b32      	cmp	r3, #50	@ 0x32
 80007c0:	dd04      	ble.n	80007cc <main+0x11c>
			  uart_print("!!! SYSTEM ERROR !!!\r\n");					// sistem hata durumuna geçti
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <main+0x160>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff5d 	bl	8000684 <uart_print>
 80007ca:	e011      	b.n	80007f0 <main+0x140>
		  }
		  else if(volt < 60){
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <main+0x154>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80007d2:	dc04      	bgt.n	80007de <main+0x12e>
			  uart_print("!!! LOW VOLTAGE WARNING !!! \r\n");			// düşük voltaj uyarısı
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <main+0x164>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff ff54 	bl	8000684 <uart_print>
 80007dc:	e77f      	b.n	80006de <main+0x2e>
		  }
		  else if(temp > 50){
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <main+0x150>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b32      	cmp	r3, #50	@ 0x32
 80007e4:	dc00      	bgt.n	80007e8 <main+0x138>
 80007e6:	e77a      	b.n	80006de <main+0x2e>
			  uart_print("!!! OVER TEMPERATURE !!! \r\n");				// yüksek sıcaklık uyarısı
 80007e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <main+0x168>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ff4a 	bl	8000684 <uart_print>
	  if(count < 100) 									// 10 saniye boyunca ölçüm yap
 80007f0:	e775      	b.n	80006de <main+0x2e>
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	08003ed8 	.word	0x08003ed8
 80007f8:	200000b4 	.word	0x200000b4
 80007fc:	20000070 	.word	0x20000070
 8000800:	2000006c 	.word	0x2000006c
 8000804:	20000068 	.word	0x20000068
 8000808:	08003eec 	.word	0x08003eec
 800080c:	20000074 	.word	0x20000074
 8000810:	08003ef8 	.word	0x08003ef8
 8000814:	08003f10 	.word	0x08003f10
 8000818:	08003f30 	.word	0x08003f30

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b09d      	sub	sp, #116	@ 0x74
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	2438      	movs	r4, #56	@ 0x38
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	2338      	movs	r3, #56	@ 0x38
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f002 fa43 	bl	8002cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000832:	2324      	movs	r3, #36	@ 0x24
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	0018      	movs	r0, r3
 8000838:	2314      	movs	r3, #20
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f002 fa3b 	bl	8002cb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000842:	003b      	movs	r3, r7
 8000844:	0018      	movs	r0, r3
 8000846:	2324      	movs	r3, #36	@ 0x24
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 fa34 	bl	8002cb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a24      	ldr	r2, [pc, #144]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000856:	401a      	ands	r2, r3
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <SystemClock_Config+0xc8>)
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0109      	lsls	r1, r1, #4
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2202      	movs	r2, #2
 8000868:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2210      	movs	r2, #16
 8000874:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	187b      	adds	r3, r7, r1
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fbc8 	bl	8001014 <HAL_RCC_OscConfig>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000888:	f000 f830 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	2124      	movs	r1, #36	@ 0x24
 800088e:	187b      	adds	r3, r7, r1
 8000890:	220f      	movs	r2, #15
 8000892:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2201      	movs	r2, #1
 8000898:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2100      	movs	r1, #0
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 ff73 	bl	800179c <HAL_RCC_ClockConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ba:	f000 f817 	bl	80008ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008be:	003b      	movs	r3, r7
 80008c0:	2202      	movs	r2, #2
 80008c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	003b      	movs	r3, r7
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f969 	bl	8001ba4 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008d6:	f000 f809 	bl	80008ec <Error_Handler>
  }
}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b01d      	add	sp, #116	@ 0x74
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	40007000 	.word	0x40007000
 80008e8:	ffffe7ff 	.word	0xffffe7ff

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <HAL_MspInit+0x24>)
 80008fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_MspInit+0x24>)
 8000902:	2101      	movs	r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <HAL_MspInit+0x24>)
 800090a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <HAL_MspInit+0x24>)
 800090e:	2180      	movs	r1, #128	@ 0x80
 8000910:	0549      	lsls	r1, r1, #21
 8000912:	430a      	orrs	r2, r1
 8000914:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	e7fd      	b.n	8000924 <NMI_Handler+0x4>

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	e7fd      	b.n	800092c <HardFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8fa 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <MX_USART2_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000968:	22e1      	movs	r2, #225	@ 0xe1
 800096a:	0252      	lsls	r2, r2, #9
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <MX_USART2_UART_Init+0x58>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fa8d 	bl	8001ec0 <HAL_UART_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f7ff ff9f 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000b8 	.word	0x200000b8
 80009b8:	40004400 	.word	0x40004400

080009bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	@ 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	240c      	movs	r4, #12
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f002 f972 	bl	8002cb8 <memset>
  if(uartHandle->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a18      	ldr	r2, [pc, #96]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d129      	bne.n	8000a32 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_UART_MspInit+0x84>)
 80009e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <HAL_UART_MspInit+0x84>)
 80009e4:	2180      	movs	r1, #128	@ 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_UART_MspInit+0x84>)
 80009ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <HAL_UART_MspInit+0x84>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	430a      	orrs	r2, r1
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <HAL_UART_MspInit+0x84>)
 80009fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fc:	2201      	movs	r2, #1
 80009fe:	4013      	ands	r3, r2
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a04:	0021      	movs	r1, r4
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	220c      	movs	r2, #12
 8000a0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2202      	movs	r2, #2
 8000a10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2204      	movs	r2, #4
 8000a22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	187a      	adds	r2, r7, r1
 8000a26:	23a0      	movs	r3, #160	@ 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f97b 	bl	8000d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b009      	add	sp, #36	@ 0x24
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40021000 	.word	0x40021000

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a44:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a48:	f7ff ff83 	bl	8000952 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	@ (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 f929 	bl	8002cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fe1b 	bl	80006b0 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   r0, =_estack
 8000a7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a88:	080040b8 	.word	0x080040b8
  ldr r2, =_sbss
 8000a8c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a90:	20000294 	.word	0x20000294

08000a94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_COMP_IRQHandler>
	...

08000a98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <HAL_Init+0x3c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_Init+0x3c>)
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f811 	bl	8000ad8 <HAL_InitTick>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e001      	b.n	8000ac6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac2:	f7ff ff19 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <HAL_InitTick+0x5c>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_InitTick+0x60>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	0019      	movs	r1, r3
 8000aea:	23fa      	movs	r3, #250	@ 0xfa
 8000aec:	0098      	lsls	r0, r3, #2
 8000aee:	f7ff faf9 	bl	80000e4 <__udivsi3>
 8000af2:	0003      	movs	r3, r0
 8000af4:	0019      	movs	r1, r3
 8000af6:	0020      	movs	r0, r4
 8000af8:	f7ff faf4 	bl	80000e4 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f905 	bl	8000d0e <HAL_SYSTICK_Config>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00f      	b.n	8000b2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d80b      	bhi.n	8000b2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2301      	movs	r3, #1
 8000b16:	425b      	negs	r3, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f8e2 	bl	8000ce4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_InitTick+0x64>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	001a      	movs	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	18d2      	adds	r2, r2, r3
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000140 	.word	0x20000140

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	20000140 	.word	0x20000140

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	0003      	movs	r3, r0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001a      	movs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd4:	d828      	bhi.n	8000c28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c94 <__NVIC_SetPriority+0xd4>)
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	33c0      	adds	r3, #192	@ 0xc0
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	589b      	ldr	r3, [r3, r2]
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	2203      	movs	r2, #3
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	21ff      	movs	r1, #255	@ 0xff
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	22ff      	movs	r2, #255	@ 0xff
 8000c04:	401a      	ands	r2, r3
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4003      	ands	r3, r0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	481f      	ldr	r0, [pc, #124]	@ (8000c94 <__NVIC_SetPriority+0xd4>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	33c0      	adds	r3, #192	@ 0xc0
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c26:	e031      	b.n	8000c8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <__NVIC_SetPriority+0xd8>)
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0019      	movs	r1, r3
 8000c30:	230f      	movs	r3, #15
 8000c32:	400b      	ands	r3, r1
 8000c34:	3b08      	subs	r3, #8
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3306      	adds	r3, #6
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	3304      	adds	r3, #4
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	0011      	movs	r1, r2
 8000c48:	2203      	movs	r2, #3
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	21ff      	movs	r1, #255	@ 0xff
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	401a      	ands	r2, r3
 8000c58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	22ff      	movs	r2, #255	@ 0xff
 8000c60:	401a      	ands	r2, r3
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0018      	movs	r0, r3
 8000c68:	2303      	movs	r3, #3
 8000c6a:	4003      	ands	r3, r0
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <__NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	001c      	movs	r4, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	4023      	ands	r3, r4
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	430a      	orrs	r2, r1
 8000c82:	3306      	adds	r3, #6
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	18c3      	adds	r3, r0, r3
 8000c88:	3304      	adds	r3, #4
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b003      	add	sp, #12
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	2380      	movs	r3, #128	@ 0x80
 8000caa:	045b      	lsls	r3, r3, #17
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d301      	bcc.n	8000cb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e010      	b.n	8000cd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <SysTick_Config+0x44>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff ff7c 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <SysTick_Config+0x44>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <SysTick_Config+0x44>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	210f      	movs	r1, #15
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	1c02      	adds	r2, r0, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ffbf 	bl	8000c9c <SysTick_Config>
 8000d1e:	0003      	movs	r3, r0
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d3e:	e14f      	b.n	8000fe0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <HAL_GPIO_Init+0x30>
 8000d56:	e140      	b.n	8000fda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d005      	beq.n	8000d70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	43da      	mvns	r2, r3
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d017      	beq.n	8000e0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	43da      	mvns	r2, r3
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2203      	movs	r2, #3
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d123      	bne.n	8000e62 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	58d3      	ldr	r3, [r2, r3]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2107      	movs	r1, #7
 8000e46:	400b      	ands	r3, r1
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	401a      	ands	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	23c0      	movs	r3, #192	@ 0xc0
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d100      	bne.n	8000ea4 <HAL_GPIO_Init+0x17c>
 8000ea2:	e09a      	b.n	8000fda <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea4:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ea8:	4b53      	ldr	r3, [pc, #332]	@ (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb0:	4a52      	ldr	r2, [pc, #328]	@ (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	589b      	ldr	r3, [r3, r2]
 8000ebc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	23a0      	movs	r3, #160	@ 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x1ea>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a47      	ldr	r2, [pc, #284]	@ (8001000 <HAL_GPIO_Init+0x2d8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1e6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a46      	ldr	r2, [pc, #280]	@ (8001004 <HAL_GPIO_Init+0x2dc>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1e2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a45      	ldr	r2, [pc, #276]	@ (8001008 <HAL_GPIO_Init+0x2e0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1de>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a44      	ldr	r2, [pc, #272]	@ (800100c <HAL_GPIO_Init+0x2e4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1da>
 8000efe:	2305      	movs	r3, #5
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f12:	2300      	movs	r3, #0
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	2103      	movs	r1, #3
 8000f18:	400a      	ands	r2, r1
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	@ (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	035b      	lsls	r3, r3, #13
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f56:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	039b      	lsls	r3, r3, #14
 8000f74:	4013      	ands	r3, r2
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	2380      	movs	r3, #128	@ 0x80
 8000f9c:	029b      	lsls	r3, r3, #10
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	025b      	lsls	r3, r3, #9
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	40da      	lsrs	r2, r3
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	d000      	beq.n	8000fee <HAL_GPIO_Init+0x2c6>
 8000fec:	e6a8      	b.n	8000d40 <HAL_GPIO_Init+0x18>
  }
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	50000400 	.word	0x50000400
 8001004:	50000800 	.word	0x50000800
 8001008:	50000c00 	.word	0x50000c00
 800100c:	50001c00 	.word	0x50001c00
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	f000 fbaf 	bl	8001786 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001028:	4bcf      	ldr	r3, [pc, #828]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	220c      	movs	r2, #12
 800102e:	4013      	ands	r3, r2
 8001030:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001032:	4bcd      	ldr	r3, [pc, #820]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	025b      	lsls	r3, r3, #9
 800103a:	4013      	ands	r3, r2
 800103c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2201      	movs	r2, #1
 8001044:	4013      	ands	r3, r2
 8001046:	d100      	bne.n	800104a <HAL_RCC_OscConfig+0x36>
 8001048:	e07e      	b.n	8001148 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d007      	beq.n	8001060 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d112      	bne.n	800107c <HAL_RCC_OscConfig+0x68>
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	025b      	lsls	r3, r3, #9
 800105c:	429a      	cmp	r2, r3
 800105e:	d10d      	bne.n	800107c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	4bc1      	ldr	r3, [pc, #772]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	4013      	ands	r3, r2
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x5a>
 800106c:	e06b      	b.n	8001146 <HAL_RCC_OscConfig+0x132>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d167      	bne.n	8001146 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	f000 fb85 	bl	8001786 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	429a      	cmp	r2, r3
 8001086:	d107      	bne.n	8001098 <HAL_RCC_OscConfig+0x84>
 8001088:	4bb7      	ldr	r3, [pc, #732]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4bb6      	ldr	r3, [pc, #728]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	0249      	lsls	r1, r1, #9
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e027      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	23a0      	movs	r3, #160	@ 0xa0
 800109e:	02db      	lsls	r3, r3, #11
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d10e      	bne.n	80010c2 <HAL_RCC_OscConfig+0xae>
 80010a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4baf      	ldr	r3, [pc, #700]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	02c9      	lsls	r1, r1, #11
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	4bad      	ldr	r3, [pc, #692]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4bac      	ldr	r3, [pc, #688]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	0249      	lsls	r1, r1, #9
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e012      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010c2:	4ba9      	ldr	r3, [pc, #676]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010c8:	49a8      	ldr	r1, [pc, #672]	@ (800136c <HAL_RCC_OscConfig+0x358>)
 80010ca:	400a      	ands	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	4ba6      	ldr	r3, [pc, #664]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	025b      	lsls	r3, r3, #9
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4ba2      	ldr	r3, [pc, #648]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80010e2:	49a3      	ldr	r1, [pc, #652]	@ (8001370 <HAL_RCC_OscConfig+0x35c>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d015      	beq.n	800111c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fd38 	bl	8000b64 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f8:	e009      	b.n	800110e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fa:	f7ff fd33 	bl	8000b64 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b64      	cmp	r3, #100	@ 0x64
 8001106:	d902      	bls.n	800110e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	f000 fb3c 	bl	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800110e:	4b96      	ldr	r3, [pc, #600]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d0ef      	beq.n	80010fa <HAL_RCC_OscConfig+0xe6>
 800111a:	e015      	b.n	8001148 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fd22 	bl	8000b64 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001126:	f7ff fd1d 	bl	8000b64 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	@ 0x64
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e326      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001138:	4b8b      	ldr	r3, [pc, #556]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x112>
 8001144:	e000      	b.n	8001148 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001146:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2202      	movs	r2, #2
 800114e:	4013      	ands	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_RCC_OscConfig+0x140>
 8001152:	e08b      	b.n	800126c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d13e      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1d0>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d13b      	bne.n	80011e4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800116c:	4b7e      	ldr	r3, [pc, #504]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2204      	movs	r2, #4
 8001172:	4013      	ands	r3, r2
 8001174:	d004      	beq.n	8001180 <HAL_RCC_OscConfig+0x16c>
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e302      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b79      	ldr	r3, [pc, #484]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a7b      	ldr	r2, [pc, #492]	@ (8001374 <HAL_RCC_OscConfig+0x360>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	4b75      	ldr	r3, [pc, #468]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001196:	4b74      	ldr	r3, [pc, #464]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2209      	movs	r2, #9
 800119c:	4393      	bics	r3, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	4b71      	ldr	r3, [pc, #452]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a8:	f000 fc40 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80011ac:	0001      	movs	r1, r0
 80011ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	220f      	movs	r2, #15
 80011b6:	4013      	ands	r3, r2
 80011b8:	4a6f      	ldr	r2, [pc, #444]	@ (8001378 <HAL_RCC_OscConfig+0x364>)
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	000a      	movs	r2, r1
 80011be:	40da      	lsrs	r2, r3
 80011c0:	4b6e      	ldr	r3, [pc, #440]	@ (800137c <HAL_RCC_OscConfig+0x368>)
 80011c2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001380 <HAL_RCC_OscConfig+0x36c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2513      	movs	r5, #19
 80011ca:	197c      	adds	r4, r7, r5
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff fc83 	bl	8000ad8 <HAL_InitTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011d6:	197b      	adds	r3, r7, r5
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d046      	beq.n	800126c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011de:	197b      	adds	r3, r7, r5
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	e2d0      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d027      	beq.n	800123a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2209      	movs	r2, #9
 80011f0:	4393      	bics	r3, r2
 80011f2:	0019      	movs	r1, r3
 80011f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fcb2 	bl	8000b64 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fcad 	bl	8000b64 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e2b6      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2204      	movs	r2, #4
 800121e:	4013      	ands	r3, r2
 8001220:	d0f1      	beq.n	8001206 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b51      	ldr	r3, [pc, #324]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4a53      	ldr	r2, [pc, #332]	@ (8001374 <HAL_RCC_OscConfig+0x360>)
 8001228:	4013      	ands	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	021a      	lsls	r2, r3, #8
 8001232:	4b4d      	ldr	r3, [pc, #308]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	e018      	b.n	800126c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b4b      	ldr	r3, [pc, #300]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b4a      	ldr	r3, [pc, #296]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001240:	2101      	movs	r1, #1
 8001242:	438a      	bics	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fc8d 	bl	8000b64 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001250:	f7ff fc88 	bl	8000b64 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e291      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001262:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2204      	movs	r2, #4
 8001268:	4013      	ands	r3, r2
 800126a:	d1f1      	bne.n	8001250 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2210      	movs	r2, #16
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_RCC_OscConfig+0x264>
 8001276:	e0a1      	b.n	80013bc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d140      	bne.n	8001300 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127e:	4b3a      	ldr	r3, [pc, #232]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d005      	beq.n	8001296 <HAL_RCC_OscConfig+0x282>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e277      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001296:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a3a      	ldr	r2, [pc, #232]	@ (8001384 <HAL_RCC_OscConfig+0x370>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012a4:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	0a19      	lsrs	r1, r3, #8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	061a      	lsls	r2, r3, #24
 80012b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	0b5b      	lsrs	r3, r3, #13
 80012c4:	3301      	adds	r3, #1
 80012c6:	2280      	movs	r2, #128	@ 0x80
 80012c8:	0212      	lsls	r2, r2, #8
 80012ca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012cc:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	210f      	movs	r1, #15
 80012d4:	400b      	ands	r3, r1
 80012d6:	4928      	ldr	r1, [pc, #160]	@ (8001378 <HAL_RCC_OscConfig+0x364>)
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <HAL_RCC_OscConfig+0x368>)
 80012de:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <HAL_RCC_OscConfig+0x36c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2513      	movs	r5, #19
 80012e6:	197c      	adds	r4, r7, r5
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fbf5 	bl	8000ad8 <HAL_InitTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d060      	beq.n	80013bc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80012fa:	197b      	adds	r3, r7, r5
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e242      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d03f      	beq.n	8001388 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800130e:	2180      	movs	r1, #128	@ 0x80
 8001310:	0049      	lsls	r1, r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fc25 	bl	8000b64 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001320:	f7ff fc20 	bl	8000b64 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e229      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	@ 0x80
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <HAL_RCC_OscConfig+0x370>)
 8001344:	4013      	ands	r3, r2
 8001346:	0019      	movs	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	0a19      	lsrs	r1, r3, #8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	061a      	lsls	r2, r3, #24
 8001360:	4b01      	ldr	r3, [pc, #4]	@ (8001368 <HAL_RCC_OscConfig+0x354>)
 8001362:	430a      	orrs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	e029      	b.n	80013bc <HAL_RCC_OscConfig+0x3a8>
 8001368:	40021000 	.word	0x40021000
 800136c:	fffeffff 	.word	0xfffeffff
 8001370:	fffbffff 	.word	0xfffbffff
 8001374:	ffffe0ff 	.word	0xffffe0ff
 8001378:	08003f4c 	.word	0x08003f4c
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004
 8001384:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001388:	4bbd      	ldr	r3, [pc, #756]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4bbc      	ldr	r3, [pc, #752]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800138e:	49bd      	ldr	r1, [pc, #756]	@ (8001684 <HAL_RCC_OscConfig+0x670>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fbe6 	bl	8000b64 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139e:	f7ff fbe1 	bl	8000b64 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1ea      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013b0:	4bb3      	ldr	r3, [pc, #716]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2208      	movs	r2, #8
 80013c2:	4013      	ands	r3, r2
 80013c4:	d036      	beq.n	8001434 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d019      	beq.n	8001402 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4bac      	ldr	r3, [pc, #688]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80013d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013d2:	4bab      	ldr	r3, [pc, #684]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80013d4:	2101      	movs	r1, #1
 80013d6:	430a      	orrs	r2, r1
 80013d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fbc3 	bl	8000b64 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fbbe 	bl	8000b64 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1c7      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80013f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f1      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3d0>
 8001400:	e018      	b.n	8001434 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001402:	4b9f      	ldr	r3, [pc, #636]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001406:	4b9e      	ldr	r3, [pc, #632]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001408:	2101      	movs	r1, #1
 800140a:	438a      	bics	r2, r1
 800140c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fba9 	bl	8000b64 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fba4 	bl	8000b64 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1ad      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800142a:	4b95      	ldr	r3, [pc, #596]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800142c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d1f1      	bne.n	8001418 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2204      	movs	r2, #4
 800143a:	4013      	ands	r3, r2
 800143c:	d100      	bne.n	8001440 <HAL_RCC_OscConfig+0x42c>
 800143e:	e0ae      	b.n	800159e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001440:	2027      	movs	r0, #39	@ 0x27
 8001442:	183b      	adds	r3, r7, r0
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001448:	4b8d      	ldr	r3, [pc, #564]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800144a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	4013      	ands	r3, r2
 8001452:	d109      	bne.n	8001468 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	4b8a      	ldr	r3, [pc, #552]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001458:	4b89      	ldr	r3, [pc, #548]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	0549      	lsls	r1, r1, #21
 800145e:	430a      	orrs	r2, r1
 8001460:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001462:	183b      	adds	r3, r7, r0
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b87      	ldr	r3, [pc, #540]	@ (8001688 <HAL_RCC_OscConfig+0x674>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4013      	ands	r3, r2
 8001472:	d11a      	bne.n	80014aa <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001474:	4b84      	ldr	r3, [pc, #528]	@ (8001688 <HAL_RCC_OscConfig+0x674>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b83      	ldr	r3, [pc, #524]	@ (8001688 <HAL_RCC_OscConfig+0x674>)
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	0049      	lsls	r1, r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001482:	f7ff fb6f 	bl	8000b64 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148c:	f7ff fb6a 	bl	8000b64 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e173      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b7a      	ldr	r3, [pc, #488]	@ (8001688 <HAL_RCC_OscConfig+0x674>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_OscConfig+0x4b2>
 80014b6:	4b72      	ldr	r3, [pc, #456]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ba:	4b71      	ldr	r3, [pc, #452]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	0049      	lsls	r1, r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80014c4:	e031      	b.n	800152a <HAL_RCC_OscConfig+0x516>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4d4>
 80014ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014d4:	496b      	ldr	r1, [pc, #428]	@ (8001684 <HAL_RCC_OscConfig+0x670>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80014da:	4b69      	ldr	r3, [pc, #420]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014de:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014e0:	496a      	ldr	r1, [pc, #424]	@ (800168c <HAL_RCC_OscConfig+0x678>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80014e6:	e020      	b.n	800152a <HAL_RCC_OscConfig+0x516>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	23a0      	movs	r3, #160	@ 0xa0
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d10e      	bne.n	8001512 <HAL_RCC_OscConfig+0x4fe>
 80014f4:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014f8:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	430a      	orrs	r2, r1
 8001500:	651a      	str	r2, [r3, #80]	@ 0x50
 8001502:	4b5f      	ldr	r3, [pc, #380]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001504:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001506:	4b5e      	ldr	r3, [pc, #376]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001508:	2180      	movs	r1, #128	@ 0x80
 800150a:	0049      	lsls	r1, r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x516>
 8001512:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001516:	4b5a      	ldr	r3, [pc, #360]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001518:	495a      	ldr	r1, [pc, #360]	@ (8001684 <HAL_RCC_OscConfig+0x670>)
 800151a:	400a      	ands	r2, r1
 800151c:	651a      	str	r2, [r3, #80]	@ 0x50
 800151e:	4b58      	ldr	r3, [pc, #352]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001522:	4b57      	ldr	r3, [pc, #348]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001524:	4959      	ldr	r1, [pc, #356]	@ (800168c <HAL_RCC_OscConfig+0x678>)
 8001526:	400a      	ands	r2, r1
 8001528:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb17 	bl	8000b64 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fb12 	bl	8000b64 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_RCC_OscConfig+0x67c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e11a      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001550:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d0ef      	beq.n	800153c <HAL_RCC_OscConfig+0x528>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fb01 	bl	8000b64 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001566:	e009      	b.n	800157c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fafc 	bl	8000b64 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	4a47      	ldr	r2, [pc, #284]	@ (8001690 <HAL_RCC_OscConfig+0x67c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e104      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157c:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800157e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d1ef      	bne.n	8001568 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001588:	2327      	movs	r3, #39	@ 0x27
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d105      	bne.n	800159e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001598:	493e      	ldr	r1, [pc, #248]	@ (8001694 <HAL_RCC_OscConfig+0x680>)
 800159a:	400a      	ands	r2, r1
 800159c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2220      	movs	r2, #32
 80015a4:	4013      	ands	r3, r2
 80015a6:	d049      	beq.n	800163c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d026      	beq.n	80015fe <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80015be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80015c8:	4b33      	ldr	r3, [pc, #204]	@ (8001698 <HAL_RCC_OscConfig+0x684>)
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_RCC_OscConfig+0x684>)
 80015ce:	2180      	movs	r1, #128	@ 0x80
 80015d0:	0189      	lsls	r1, r1, #6
 80015d2:	430a      	orrs	r2, r1
 80015d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fac5 	bl	8000b64 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e0:	f7ff fac0 	bl	8000b64 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0c9      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2202      	movs	r2, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f1      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5cc>
 80015fc:	e01e      	b.n	800163c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001604:	2101      	movs	r1, #1
 8001606:	438a      	bics	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <HAL_RCC_OscConfig+0x684>)
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <HAL_RCC_OscConfig+0x684>)
 8001610:	4922      	ldr	r1, [pc, #136]	@ (800169c <HAL_RCC_OscConfig+0x688>)
 8001612:	400a      	ands	r2, r1
 8001614:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faa5 	bl	8000b64 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001620:	f7ff faa0 	bl	8000b64 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0a9      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d1f1      	bne.n	8001620 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x632>
 8001644:	e09e      	b.n	8001784 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d100      	bne.n	800164e <HAL_RCC_OscConfig+0x63a>
 800164c:	e077      	b.n	800173e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001652:	2b02      	cmp	r3, #2
 8001654:	d158      	bne.n	8001708 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_RCC_OscConfig+0x66c>)
 800165c:	4910      	ldr	r1, [pc, #64]	@ (80016a0 <HAL_RCC_OscConfig+0x68c>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fa7f 	bl	8000b64 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800166a:	e01b      	b.n	80016a4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fa7a 	bl	8000b64 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d914      	bls.n	80016a4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e083      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	40021000 	.word	0x40021000
 8001684:	fffffeff 	.word	0xfffffeff
 8001688:	40007000 	.word	0x40007000
 800168c:	fffffbff 	.word	0xfffffbff
 8001690:	00001388 	.word	0x00001388
 8001694:	efffffff 	.word	0xefffffff
 8001698:	40010000 	.word	0x40010000
 800169c:	ffffdfff 	.word	0xffffdfff
 80016a0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	049b      	lsls	r3, r3, #18
 80016ac:	4013      	ands	r3, r2
 80016ae:	d1dd      	bne.n	800166c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	4b37      	ldr	r3, [pc, #220]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a37      	ldr	r2, [pc, #220]	@ (8001794 <HAL_RCC_OscConfig+0x780>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c8:	431a      	orrs	r2, r3
 80016ca:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 80016d6:	2180      	movs	r1, #128	@ 0x80
 80016d8:	0449      	lsls	r1, r1, #17
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fa41 	bl	8000b64 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fa3c 	bl	8000b64 <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	049b      	lsls	r3, r3, #18
 8001702:	4013      	ands	r3, r2
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x6d4>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 800170e:	4922      	ldr	r1, [pc, #136]	@ (8001798 <HAL_RCC_OscConfig+0x784>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fa26 	bl	8000b64 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff fa21 	bl	8000b64 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e02a      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	049b      	lsls	r3, r3, #18
 8001738:	4013      	ands	r3, r2
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x70a>
 800173c:	e022      	b.n	8001784 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e01d      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_RCC_OscConfig+0x77c>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	025b      	lsls	r3, r3, #9
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	429a      	cmp	r2, r3
 800175e:	d10f      	bne.n	8001780 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	23f0      	movs	r3, #240	@ 0xf0
 8001764:	039b      	lsls	r3, r3, #14
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	23c0      	movs	r3, #192	@ 0xc0
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b00a      	add	sp, #40	@ 0x28
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	ff02ffff 	.word	0xff02ffff
 8001798:	feffffff 	.word	0xfeffffff

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e128      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b96      	ldr	r3, [pc, #600]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d91e      	bls.n	80017fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b93      	ldr	r3, [pc, #588]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4393      	bics	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4b90      	ldr	r3, [pc, #576]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017d0:	f7ff f9c8 	bl	8000b64 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d8:	e009      	b.n	80017ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017da:	f7ff f9c3 	bl	8000b64 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a8a      	ldr	r2, [pc, #552]	@ (8001a10 <HAL_RCC_ClockConfig+0x274>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e109      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b87      	ldr	r3, [pc, #540]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d1ee      	bne.n	80017da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001806:	4b83      	ldr	r3, [pc, #524]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	22f0      	movs	r2, #240	@ 0xf0
 800180c:	4393      	bics	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b7f      	ldr	r3, [pc, #508]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001816:	430a      	orrs	r2, r1
 8001818:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	d100      	bne.n	8001826 <HAL_RCC_ClockConfig+0x8a>
 8001824:	e089      	b.n	800193a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800182e:	4b79      	ldr	r3, [pc, #484]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d120      	bne.n	800187c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0e1      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d114      	bne.n	800187c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0d5      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d106      	bne.n	800186c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2204      	movs	r2, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d109      	bne.n	800187c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0ca      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800186c:	4b69      	ldr	r3, [pc, #420]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0c2      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187c:	4b65      	ldr	r3, [pc, #404]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2203      	movs	r2, #3
 8001882:	4393      	bics	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4b62      	ldr	r3, [pc, #392]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff f968 	bl	8000b64 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d111      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	e009      	b.n	80018b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a2:	f7ff f95f 	bl	8000b64 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4a58      	ldr	r2, [pc, #352]	@ (8001a10 <HAL_RCC_ClockConfig+0x274>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0a5      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b6:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	220c      	movs	r2, #12
 80018bc:	4013      	ands	r3, r2
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d1ef      	bne.n	80018a2 <HAL_RCC_ClockConfig+0x106>
 80018c2:	e03a      	b.n	800193a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d111      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	e009      	b.n	80018e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	f7ff f949 	bl	8000b64 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a10 <HAL_RCC_ClockConfig+0x274>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e08f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	220c      	movs	r2, #12
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d1ef      	bne.n	80018ce <HAL_RCC_ClockConfig+0x132>
 80018ee:	e024      	b.n	800193a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d11b      	bne.n	8001930 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f8:	e009      	b.n	800190e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7ff f933 	bl	8000b64 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a42      	ldr	r2, [pc, #264]	@ (8001a10 <HAL_RCC_ClockConfig+0x274>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e079      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	220c      	movs	r2, #12
 8001914:	4013      	ands	r3, r2
 8001916:	2b04      	cmp	r3, #4
 8001918:	d1ef      	bne.n	80018fa <HAL_RCC_ClockConfig+0x15e>
 800191a:	e00e      	b.n	800193a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f922 	bl	8000b64 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	4a3a      	ldr	r2, [pc, #232]	@ (8001a10 <HAL_RCC_ClockConfig+0x274>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e068      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001930:	4b38      	ldr	r3, [pc, #224]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	220c      	movs	r2, #12
 8001936:	4013      	ands	r3, r2
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193a:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4013      	ands	r3, r2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d21e      	bcs.n	8001986 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	4b2e      	ldr	r3, [pc, #184]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800195a:	f7ff f903 	bl	8000b64 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	e009      	b.n	8001978 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f8fe 	bl	8000b64 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	4a28      	ldr	r2, [pc, #160]	@ (8001a10 <HAL_RCC_ClockConfig+0x274>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e044      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <HAL_RCC_ClockConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d1ee      	bne.n	8001964 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <HAL_RCC_ClockConfig+0x27c>)
 8001996:	4013      	ands	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2208      	movs	r2, #8
 80019aa:	4013      	ands	r3, r2
 80019ac:	d00a      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ae:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a1c <HAL_RCC_ClockConfig+0x280>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00da      	lsls	r2, r3, #3
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c4:	f000 f832 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019c8:	0001      	movs	r1, r0
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_RCC_ClockConfig+0x278>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	220f      	movs	r2, #15
 80019d2:	4013      	ands	r3, r2
 80019d4:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <HAL_RCC_ClockConfig+0x284>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	000a      	movs	r2, r1
 80019da:	40da      	lsrs	r2, r3
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_RCC_ClockConfig+0x288>)
 80019de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_RCC_ClockConfig+0x28c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	250b      	movs	r5, #11
 80019e6:	197c      	adds	r4, r7, r5
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff f875 	bl	8000ad8 <HAL_InitTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019f2:	197b      	adds	r3, r7, r5
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019fa:	197b      	adds	r3, r7, r5
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	00001388 	.word	0x00001388
 8001a14:	40021000 	.word	0x40021000
 8001a18:	fffff8ff 	.word	0xfffff8ff
 8001a1c:	ffffc7ff 	.word	0xffffc7ff
 8001a20:	08003f4c 	.word	0x08003f4c
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a32:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d013      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3e>
 8001a42:	d85c      	bhi.n	8001afe <HAL_RCC_GetSysClockFreq+0xd2>
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d002      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x22>
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d00b      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x38>
 8001a4c:	e057      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	4013      	ands	r3, r2
 8001a56:	d002      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a5a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a5c:	e05d      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001a5e:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a60:	613b      	str	r3, [r7, #16]
      break;
 8001a62:	e05a      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a64:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a66:	613b      	str	r3, [r7, #16]
      break;
 8001a68:	e057      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	220f      	movs	r2, #15
 8001a70:	4013      	ands	r3, r2
 8001a72:	4a30      	ldr	r2, [pc, #192]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	0d9b      	lsrs	r3, r3, #22
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4013      	ands	r3, r2
 8001a80:	3301      	adds	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d00f      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	000a      	movs	r2, r1
 8001a94:	0152      	lsls	r2, r2, #5
 8001a96:	1a52      	subs	r2, r2, r1
 8001a98:	0193      	lsls	r3, r2, #6
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	185b      	adds	r3, r3, r1
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7fe fb1d 	bl	80000e4 <__udivsi3>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e023      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d00f      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	000a      	movs	r2, r1
 8001abe:	0152      	lsls	r2, r2, #5
 8001ac0:	1a52      	subs	r2, r2, r1
 8001ac2:	0193      	lsls	r3, r2, #6
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	185b      	adds	r3, r3, r1
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7fe fb08 	bl	80000e4 <__udivsi3>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00e      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	000a      	movs	r2, r1
 8001ade:	0152      	lsls	r2, r2, #5
 8001ae0:	1a52      	subs	r2, r2, r1
 8001ae2:	0193      	lsls	r3, r2, #6
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	185b      	adds	r3, r3, r1
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe faf8 	bl	80000e4 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
      break;
 8001afc:	e00d      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0b5b      	lsrs	r3, r3, #13
 8001b04:	2207      	movs	r2, #7
 8001b06:	4013      	ands	r3, r2
 8001b08:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	0212      	lsls	r2, r2, #8
 8001b12:	409a      	lsls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      break;
 8001b18:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b1a:	693b      	ldr	r3, [r7, #16]
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b006      	add	sp, #24
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	003d0900 	.word	0x003d0900
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200
 8001b34:	08003f64 	.word	0x08003f64

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	@ (8001b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff2 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b54:	0001      	movs	r1, r0
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	4013      	ands	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	40d9      	lsrs	r1, r3
 8001b66:	000b      	movs	r3, r1
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08003f5c 	.word	0x08003f5c

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff ffdc 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b80:	0001      	movs	r1, r0
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	40d9      	lsrs	r1, r3
 8001b92:	000b      	movs	r3, r1
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08003f5c 	.word	0x08003f5c

08001ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bac:	2317      	movs	r3, #23
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001bca:	e104      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bcc:	4bb1      	ldr	r3, [pc, #708]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	055b      	lsls	r3, r3, #21
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d10a      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	4bae      	ldr	r3, [pc, #696]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bdc:	4bad      	ldr	r3, [pc, #692]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bde:	2180      	movs	r1, #128	@ 0x80
 8001be0:	0549      	lsls	r1, r1, #21
 8001be2:	430a      	orrs	r2, r1
 8001be4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001be6:	2317      	movs	r3, #23
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4baa      	ldr	r3, [pc, #680]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4ba7      	ldr	r3, [pc, #668]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4ba6      	ldr	r3, [pc, #664]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	0049      	lsls	r1, r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c08:	f7fe ffac 	bl	8000b64 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7fe ffa7 	bl	8000b64 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	@ 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e133      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b9c      	ldr	r3, [pc, #624]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c30:	4b98      	ldr	r3, [pc, #608]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	23c0      	movs	r3, #192	@ 0xc0
 8001c36:	039b      	lsls	r3, r3, #14
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	23c0      	movs	r3, #192	@ 0xc0
 8001c42:	039b      	lsls	r3, r3, #14
 8001c44:	4013      	ands	r3, r2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	23c0      	movs	r3, #192	@ 0xc0
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	4013      	ands	r3, r2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23c0      	movs	r3, #192	@ 0xc0
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	401a      	ands	r2, r3
 8001c66:	23c0      	movs	r3, #192	@ 0xc0
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10a      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c6e:	4b89      	ldr	r3, [pc, #548]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	029b      	lsls	r3, r3, #10
 8001c76:	401a      	ands	r2, r3
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e103      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c84:	4b83      	ldr	r3, [pc, #524]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c88:	23c0      	movs	r3, #192	@ 0xc0
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d049      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	23c0      	movs	r3, #192	@ 0xc0
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d004      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4013      	ands	r3, r2
 8001cae:	d10d      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	23c0      	movs	r3, #192	@ 0xc0
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	4013      	ands	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d034      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d02e      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ccc:	4b71      	ldr	r3, [pc, #452]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd0:	4a72      	ldr	r2, [pc, #456]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cda:	4b6e      	ldr	r3, [pc, #440]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cdc:	2180      	movs	r1, #128	@ 0x80
 8001cde:	0309      	lsls	r1, r1, #12
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cea:	496d      	ldr	r1, [pc, #436]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cf0:	4b68      	ldr	r3, [pc, #416]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d014      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe ff30 	bl	8000b64 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d08:	e009      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ff2b 	bl	8000b64 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a63      	ldr	r2, [pc, #396]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0b6      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0ef      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	23c0      	movs	r3, #192	@ 0xc0
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	401a      	ands	r2, r3
 8001d40:	23c0      	movs	r3, #192	@ 0xc0
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001d48:	4b52      	ldr	r3, [pc, #328]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	23c0      	movs	r3, #192	@ 0xc0
 8001d58:	039b      	lsls	r3, r3, #14
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4b4c      	ldr	r3, [pc, #304]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	23c0      	movs	r3, #192	@ 0xc0
 8001d6c:	029b      	lsls	r3, r3, #10
 8001d6e:	401a      	ands	r2, r3
 8001d70:	4b48      	ldr	r3, [pc, #288]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d01f      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	23c0      	movs	r3, #192	@ 0xc0
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	401a      	ands	r2, r3
 8001d8a:	23c0      	movs	r3, #192	@ 0xc0
 8001d8c:	029b      	lsls	r3, r3, #10
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d10c      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001d92:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a44      	ldr	r2, [pc, #272]	@ (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	23c0      	movs	r3, #192	@ 0xc0
 8001da2:	039b      	lsls	r3, r3, #14
 8001da4:	401a      	ands	r2, r3
 8001da6:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dae:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	23c0      	movs	r3, #192	@ 0xc0
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	401a      	ands	r2, r3
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc0:	2317      	movs	r3, #23
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d105      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd0:	4936      	ldr	r1, [pc, #216]	@ (8001eac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	2203      	movs	r2, #3
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	220c      	movs	r2, #12
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2204      	movs	r2, #4
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e20:	4a23      	ldr	r2, [pc, #140]	@ (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2208      	movs	r2, #8
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2240      	movs	r2, #64	@ 0x40
 8001e54:	4013      	ands	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2280      	movs	r2, #128	@ 0x80
 8001e72:	4013      	ands	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e86:	430a      	orrs	r2, r1
 8001e88:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b006      	add	sp, #24
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	fffcffff 	.word	0xfffcffff
 8001ea0:	fff7ffff 	.word	0xfff7ffff
 8001ea4:	00001388 	.word	0x00001388
 8001ea8:	ffcfffff 	.word	0xffcfffff
 8001eac:	efffffff 	.word	0xefffffff
 8001eb0:	fffff3ff 	.word	0xfffff3ff
 8001eb4:	ffffcfff 	.word	0xffffcfff
 8001eb8:	fbffffff 	.word	0xfbffffff
 8001ebc:	fff3ffff 	.word	0xfff3ffff

08001ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e044      	b.n	8001f5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2278      	movs	r2, #120	@ 0x78
 8001ede:	2100      	movs	r1, #0
 8001ee0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fd69 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2224      	movs	r2, #36	@ 0x24
 8001eee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	438a      	bics	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 fb50 	bl	80025b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f8c8 	bl	80020a8 <UART_SetConfig>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e01c      	b.n	8001f5c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	490d      	ldr	r1, [pc, #52]	@ (8001f64 <HAL_UART_Init+0xa4>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	212a      	movs	r1, #42	@ 0x2a
 8001f3e:	438a      	bics	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 fbdf 	bl	8002718 <UART_CheckIdleState>
 8001f5a:	0003      	movs	r3, r0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	ffffb7ff 	.word	0xffffb7ff

08001f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	1dbb      	adds	r3, r7, #6
 8001f76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d000      	beq.n	8001f82 <HAL_UART_Transmit+0x1a>
 8001f80:	e08c      	b.n	800209c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_UART_Transmit+0x28>
 8001f88:	1dbb      	adds	r3, r7, #6
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e084      	b.n	800209e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d109      	bne.n	8001fb4 <HAL_UART_Transmit+0x4c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2201      	movs	r2, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e074      	b.n	800209e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2284      	movs	r2, #132	@ 0x84
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2221      	movs	r2, #33	@ 0x21
 8001fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fc2:	f7fe fdcf 	bl	8000b64 <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1dba      	adds	r2, r7, #6
 8001fce:	2150      	movs	r1, #80	@ 0x50
 8001fd0:	8812      	ldrh	r2, [r2, #0]
 8001fd2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1dba      	adds	r2, r7, #6
 8001fd8:	2152      	movs	r1, #82	@ 0x52
 8001fda:	8812      	ldrh	r2, [r2, #0]
 8001fdc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d108      	bne.n	8001ffc <HAL_UART_Transmit+0x94>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d104      	bne.n	8001ffc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	e003      	b.n	8002004 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002004:	e02f      	b.n	8002066 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	0013      	movs	r3, r2
 8002010:	2200      	movs	r2, #0
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	f000 fc28 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	d004      	beq.n	8002026 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e03b      	b.n	800209e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	001a      	movs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	05d2      	lsls	r2, r2, #23
 8002038:	0dd2      	lsrs	r2, r2, #23
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3302      	adds	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	e007      	b.n	8002054 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2252      	movs	r2, #82	@ 0x52
 8002058:	5a9b      	ldrh	r3, [r3, r2]
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b299      	uxth	r1, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2252      	movs	r2, #82	@ 0x52
 8002064:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2252      	movs	r2, #82	@ 0x52
 800206a:	5a9b      	ldrh	r3, [r3, r2]
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1c9      	bne.n	8002006 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	0013      	movs	r3, r2
 800207c:	2200      	movs	r2, #0
 800207e:	2140      	movs	r1, #64	@ 0x40
 8002080:	f000 fbf2 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d004      	beq.n	8002092 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e005      	b.n	800209e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
  }
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b008      	add	sp, #32
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b08e      	sub	sp, #56	@ 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020b0:	231a      	movs	r3, #26
 80020b2:	2218      	movs	r2, #24
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	19db      	adds	r3, r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4ac6      	ldr	r2, [pc, #792]	@ (80023f4 <UART_SetConfig+0x34c>)
 80020dc:	4013      	ands	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4ac1      	ldr	r2, [pc, #772]	@ (80023f8 <UART_SetConfig+0x350>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4abb      	ldr	r2, [pc, #748]	@ (80023fc <UART_SetConfig+0x354>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002118:	4313      	orrs	r3, r2
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4ab7      	ldr	r2, [pc, #732]	@ (8002400 <UART_SetConfig+0x358>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4ab3      	ldr	r2, [pc, #716]	@ (8002404 <UART_SetConfig+0x35c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d131      	bne.n	80021a0 <UART_SetConfig+0xf8>
 800213c:	4bb2      	ldr	r3, [pc, #712]	@ (8002408 <UART_SetConfig+0x360>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	2203      	movs	r2, #3
 8002142:	4013      	ands	r3, r2
 8002144:	2b03      	cmp	r3, #3
 8002146:	d01d      	beq.n	8002184 <UART_SetConfig+0xdc>
 8002148:	d823      	bhi.n	8002192 <UART_SetConfig+0xea>
 800214a:	2b02      	cmp	r3, #2
 800214c:	d00c      	beq.n	8002168 <UART_SetConfig+0xc0>
 800214e:	d820      	bhi.n	8002192 <UART_SetConfig+0xea>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <UART_SetConfig+0xb2>
 8002154:	2b01      	cmp	r3, #1
 8002156:	d00e      	beq.n	8002176 <UART_SetConfig+0xce>
 8002158:	e01b      	b.n	8002192 <UART_SetConfig+0xea>
 800215a:	231b      	movs	r3, #27
 800215c:	2218      	movs	r2, #24
 800215e:	189b      	adds	r3, r3, r2
 8002160:	19db      	adds	r3, r3, r7
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e09c      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002168:	231b      	movs	r3, #27
 800216a:	2218      	movs	r2, #24
 800216c:	189b      	adds	r3, r3, r2
 800216e:	19db      	adds	r3, r3, r7
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e095      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002176:	231b      	movs	r3, #27
 8002178:	2218      	movs	r2, #24
 800217a:	189b      	adds	r3, r3, r2
 800217c:	19db      	adds	r3, r3, r7
 800217e:	2204      	movs	r2, #4
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e08e      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002184:	231b      	movs	r3, #27
 8002186:	2218      	movs	r2, #24
 8002188:	189b      	adds	r3, r3, r2
 800218a:	19db      	adds	r3, r3, r7
 800218c:	2208      	movs	r2, #8
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e087      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002192:	231b      	movs	r3, #27
 8002194:	2218      	movs	r2, #24
 8002196:	189b      	adds	r3, r3, r2
 8002198:	19db      	adds	r3, r3, r7
 800219a:	2210      	movs	r2, #16
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e080      	b.n	80022a2 <UART_SetConfig+0x1fa>
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a99      	ldr	r2, [pc, #612]	@ (800240c <UART_SetConfig+0x364>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d131      	bne.n	800220e <UART_SetConfig+0x166>
 80021aa:	4b97      	ldr	r3, [pc, #604]	@ (8002408 <UART_SetConfig+0x360>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ae:	220c      	movs	r2, #12
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d01d      	beq.n	80021f2 <UART_SetConfig+0x14a>
 80021b6:	d823      	bhi.n	8002200 <UART_SetConfig+0x158>
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d00c      	beq.n	80021d6 <UART_SetConfig+0x12e>
 80021bc:	d820      	bhi.n	8002200 <UART_SetConfig+0x158>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <UART_SetConfig+0x120>
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d00e      	beq.n	80021e4 <UART_SetConfig+0x13c>
 80021c6:	e01b      	b.n	8002200 <UART_SetConfig+0x158>
 80021c8:	231b      	movs	r3, #27
 80021ca:	2218      	movs	r2, #24
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	19db      	adds	r3, r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e065      	b.n	80022a2 <UART_SetConfig+0x1fa>
 80021d6:	231b      	movs	r3, #27
 80021d8:	2218      	movs	r2, #24
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	19db      	adds	r3, r3, r7
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e05e      	b.n	80022a2 <UART_SetConfig+0x1fa>
 80021e4:	231b      	movs	r3, #27
 80021e6:	2218      	movs	r2, #24
 80021e8:	189b      	adds	r3, r3, r2
 80021ea:	19db      	adds	r3, r3, r7
 80021ec:	2204      	movs	r2, #4
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e057      	b.n	80022a2 <UART_SetConfig+0x1fa>
 80021f2:	231b      	movs	r3, #27
 80021f4:	2218      	movs	r2, #24
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	19db      	adds	r3, r3, r7
 80021fa:	2208      	movs	r2, #8
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e050      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002200:	231b      	movs	r3, #27
 8002202:	2218      	movs	r2, #24
 8002204:	189b      	adds	r3, r3, r2
 8002206:	19db      	adds	r3, r3, r7
 8002208:	2210      	movs	r2, #16
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e049      	b.n	80022a2 <UART_SetConfig+0x1fa>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7a      	ldr	r2, [pc, #488]	@ (80023fc <UART_SetConfig+0x354>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d13e      	bne.n	8002296 <UART_SetConfig+0x1ee>
 8002218:	4b7b      	ldr	r3, [pc, #492]	@ (8002408 <UART_SetConfig+0x360>)
 800221a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800221c:	23c0      	movs	r3, #192	@ 0xc0
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4013      	ands	r3, r2
 8002222:	22c0      	movs	r2, #192	@ 0xc0
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <UART_SetConfig+0x1d2>
 800222a:	22c0      	movs	r2, #192	@ 0xc0
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	4293      	cmp	r3, r2
 8002230:	d82a      	bhi.n	8002288 <UART_SetConfig+0x1e0>
 8002232:	2280      	movs	r2, #128	@ 0x80
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	4293      	cmp	r3, r2
 8002238:	d011      	beq.n	800225e <UART_SetConfig+0x1b6>
 800223a:	2280      	movs	r2, #128	@ 0x80
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	4293      	cmp	r3, r2
 8002240:	d822      	bhi.n	8002288 <UART_SetConfig+0x1e0>
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <UART_SetConfig+0x1a8>
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	00d2      	lsls	r2, r2, #3
 800224a:	4293      	cmp	r3, r2
 800224c:	d00e      	beq.n	800226c <UART_SetConfig+0x1c4>
 800224e:	e01b      	b.n	8002288 <UART_SetConfig+0x1e0>
 8002250:	231b      	movs	r3, #27
 8002252:	2218      	movs	r2, #24
 8002254:	189b      	adds	r3, r3, r2
 8002256:	19db      	adds	r3, r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e021      	b.n	80022a2 <UART_SetConfig+0x1fa>
 800225e:	231b      	movs	r3, #27
 8002260:	2218      	movs	r2, #24
 8002262:	189b      	adds	r3, r3, r2
 8002264:	19db      	adds	r3, r3, r7
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e01a      	b.n	80022a2 <UART_SetConfig+0x1fa>
 800226c:	231b      	movs	r3, #27
 800226e:	2218      	movs	r2, #24
 8002270:	189b      	adds	r3, r3, r2
 8002272:	19db      	adds	r3, r3, r7
 8002274:	2204      	movs	r2, #4
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e013      	b.n	80022a2 <UART_SetConfig+0x1fa>
 800227a:	231b      	movs	r3, #27
 800227c:	2218      	movs	r2, #24
 800227e:	189b      	adds	r3, r3, r2
 8002280:	19db      	adds	r3, r3, r7
 8002282:	2208      	movs	r2, #8
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e00c      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002288:	231b      	movs	r3, #27
 800228a:	2218      	movs	r2, #24
 800228c:	189b      	adds	r3, r3, r2
 800228e:	19db      	adds	r3, r3, r7
 8002290:	2210      	movs	r2, #16
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	e005      	b.n	80022a2 <UART_SetConfig+0x1fa>
 8002296:	231b      	movs	r3, #27
 8002298:	2218      	movs	r2, #24
 800229a:	189b      	adds	r3, r3, r2
 800229c:	19db      	adds	r3, r3, r7
 800229e:	2210      	movs	r2, #16
 80022a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a55      	ldr	r2, [pc, #340]	@ (80023fc <UART_SetConfig+0x354>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d000      	beq.n	80022ae <UART_SetConfig+0x206>
 80022ac:	e084      	b.n	80023b8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80022ae:	231b      	movs	r3, #27
 80022b0:	2218      	movs	r2, #24
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	19db      	adds	r3, r3, r7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d01d      	beq.n	80022f8 <UART_SetConfig+0x250>
 80022bc:	dc20      	bgt.n	8002300 <UART_SetConfig+0x258>
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d015      	beq.n	80022ee <UART_SetConfig+0x246>
 80022c2:	dc1d      	bgt.n	8002300 <UART_SetConfig+0x258>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <UART_SetConfig+0x226>
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d005      	beq.n	80022d8 <UART_SetConfig+0x230>
 80022cc:	e018      	b.n	8002300 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022ce:	f7ff fc3d 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 80022d2:	0003      	movs	r3, r0
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022d6:	e01c      	b.n	8002312 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002408 <UART_SetConfig+0x360>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2210      	movs	r2, #16
 80022de:	4013      	ands	r3, r2
 80022e0:	d002      	beq.n	80022e8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <UART_SetConfig+0x368>)
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022e6:	e014      	b.n	8002312 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80022e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <UART_SetConfig+0x36c>)
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022ec:	e011      	b.n	8002312 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ee:	f7ff fb9d 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80022f2:	0003      	movs	r3, r0
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022f6:	e00c      	b.n	8002312 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022fe:	e008      	b.n	8002312 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002304:	231a      	movs	r3, #26
 8002306:	2218      	movs	r2, #24
 8002308:	189b      	adds	r3, r3, r2
 800230a:	19db      	adds	r3, r3, r7
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
        break;
 8002310:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d100      	bne.n	800231a <UART_SetConfig+0x272>
 8002318:	e132      	b.n	8002580 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	0013      	movs	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	189b      	adds	r3, r3, r2
 8002324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002326:	429a      	cmp	r2, r3
 8002328:	d305      	bcc.n	8002336 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002332:	429a      	cmp	r2, r3
 8002334:	d906      	bls.n	8002344 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002336:	231a      	movs	r3, #26
 8002338:	2218      	movs	r2, #24
 800233a:	189b      	adds	r3, r3, r2
 800233c:	19db      	adds	r3, r3, r7
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e11d      	b.n	8002580 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	6939      	ldr	r1, [r7, #16]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	000b      	movs	r3, r1
 8002352:	0e1b      	lsrs	r3, r3, #24
 8002354:	0010      	movs	r0, r2
 8002356:	0205      	lsls	r5, r0, #8
 8002358:	431d      	orrs	r5, r3
 800235a:	000b      	movs	r3, r1
 800235c:	021c      	lsls	r4, r3, #8
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68b8      	ldr	r0, [r7, #8]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	1900      	adds	r0, r0, r4
 8002370:	4169      	adcs	r1, r5
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f7fe f826 	bl	80003d0 <__aeabi_uldivmod>
 8002384:	0002      	movs	r2, r0
 8002386:	000b      	movs	r3, r1
 8002388:	0013      	movs	r3, r2
 800238a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800238c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800238e:	23c0      	movs	r3, #192	@ 0xc0
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	429a      	cmp	r2, r3
 8002394:	d309      	bcc.n	80023aa <UART_SetConfig+0x302>
 8002396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	035b      	lsls	r3, r3, #13
 800239c:	429a      	cmp	r2, r3
 800239e:	d204      	bcs.n	80023aa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	e0ea      	b.n	8002580 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80023aa:	231a      	movs	r3, #26
 80023ac:	2218      	movs	r2, #24
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	19db      	adds	r3, r3, r7
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e0e3      	b.n	8002580 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d000      	beq.n	80023c6 <UART_SetConfig+0x31e>
 80023c4:	e085      	b.n	80024d2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80023c6:	231b      	movs	r3, #27
 80023c8:	2218      	movs	r2, #24
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	19db      	adds	r3, r3, r7
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d837      	bhi.n	8002444 <UART_SetConfig+0x39c>
 80023d4:	009a      	lsls	r2, r3, #2
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <UART_SetConfig+0x370>)
 80023d8:	18d3      	adds	r3, r2, r3
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023de:	f7ff fbb5 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 80023e2:	0003      	movs	r3, r0
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023e6:	e036      	b.n	8002456 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023e8:	f7ff fbc6 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80023ec:	0003      	movs	r3, r0
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023f0:	e031      	b.n	8002456 <UART_SetConfig+0x3ae>
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	efff69f3 	.word	0xefff69f3
 80023f8:	ffffcfff 	.word	0xffffcfff
 80023fc:	40004800 	.word	0x40004800
 8002400:	fffff4ff 	.word	0xfffff4ff
 8002404:	40013800 	.word	0x40013800
 8002408:	40021000 	.word	0x40021000
 800240c:	40004400 	.word	0x40004400
 8002410:	003d0900 	.word	0x003d0900
 8002414:	00f42400 	.word	0x00f42400
 8002418:	08003f70 	.word	0x08003f70
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800241c:	4b60      	ldr	r3, [pc, #384]	@ (80025a0 <UART_SetConfig+0x4f8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2210      	movs	r2, #16
 8002422:	4013      	ands	r3, r2
 8002424:	d002      	beq.n	800242c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002426:	4b5f      	ldr	r3, [pc, #380]	@ (80025a4 <UART_SetConfig+0x4fc>)
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800242a:	e014      	b.n	8002456 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800242c:	4b5e      	ldr	r3, [pc, #376]	@ (80025a8 <UART_SetConfig+0x500>)
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002430:	e011      	b.n	8002456 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002432:	f7ff fafb 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002436:	0003      	movs	r3, r0
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800243a:	e00c      	b.n	8002456 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002442:	e008      	b.n	8002456 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002448:	231a      	movs	r3, #26
 800244a:	2218      	movs	r2, #24
 800244c:	189b      	adds	r3, r3, r2
 800244e:	19db      	adds	r3, r3, r7
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
        break;
 8002454:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d100      	bne.n	800245e <UART_SetConfig+0x3b6>
 800245c:	e090      	b.n	8002580 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002460:	005a      	lsls	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	18d2      	adds	r2, r2, r3
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	0019      	movs	r1, r3
 8002470:	0010      	movs	r0, r2
 8002472:	f7fd fe37 	bl	80000e4 <__udivsi3>
 8002476:	0003      	movs	r3, r0
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d921      	bls.n	80024c4 <UART_SetConfig+0x41c>
 8002480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	429a      	cmp	r2, r3
 8002488:	d21c      	bcs.n	80024c4 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248c:	b29a      	uxth	r2, r3
 800248e:	200e      	movs	r0, #14
 8002490:	2418      	movs	r4, #24
 8002492:	1903      	adds	r3, r0, r4
 8002494:	19db      	adds	r3, r3, r7
 8002496:	210f      	movs	r1, #15
 8002498:	438a      	bics	r2, r1
 800249a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2207      	movs	r2, #7
 80024a4:	4013      	ands	r3, r2
 80024a6:	b299      	uxth	r1, r3
 80024a8:	1903      	adds	r3, r0, r4
 80024aa:	19db      	adds	r3, r3, r7
 80024ac:	1902      	adds	r2, r0, r4
 80024ae:	19d2      	adds	r2, r2, r7
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1902      	adds	r2, r0, r4
 80024bc:	19d2      	adds	r2, r2, r7
 80024be:	8812      	ldrh	r2, [r2, #0]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e05d      	b.n	8002580 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80024c4:	231a      	movs	r3, #26
 80024c6:	2218      	movs	r2, #24
 80024c8:	189b      	adds	r3, r3, r2
 80024ca:	19db      	adds	r3, r3, r7
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e056      	b.n	8002580 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024d2:	231b      	movs	r3, #27
 80024d4:	2218      	movs	r2, #24
 80024d6:	189b      	adds	r3, r3, r2
 80024d8:	19db      	adds	r3, r3, r7
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d822      	bhi.n	8002526 <UART_SetConfig+0x47e>
 80024e0:	009a      	lsls	r2, r3, #2
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <UART_SetConfig+0x504>)
 80024e4:	18d3      	adds	r3, r2, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ea:	f7ff fb2f 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 80024ee:	0003      	movs	r3, r0
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024f2:	e021      	b.n	8002538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024f4:	f7ff fb40 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80024f8:	0003      	movs	r3, r0
 80024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80024fc:	e01c      	b.n	8002538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024fe:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <UART_SetConfig+0x4f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2210      	movs	r2, #16
 8002504:	4013      	ands	r3, r2
 8002506:	d002      	beq.n	800250e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <UART_SetConfig+0x4fc>)
 800250a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800250c:	e014      	b.n	8002538 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800250e:	4b26      	ldr	r3, [pc, #152]	@ (80025a8 <UART_SetConfig+0x500>)
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002512:	e011      	b.n	8002538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002514:	f7ff fa8a 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002518:	0003      	movs	r3, r0
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800251c:	e00c      	b.n	8002538 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002524:	e008      	b.n	8002538 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800252a:	231a      	movs	r3, #26
 800252c:	2218      	movs	r2, #24
 800252e:	189b      	adds	r3, r3, r2
 8002530:	19db      	adds	r3, r3, r7
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
        break;
 8002536:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d020      	beq.n	8002580 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	085a      	lsrs	r2, r3, #1
 8002544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002546:	18d2      	adds	r2, r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0019      	movs	r1, r3
 800254e:	0010      	movs	r0, r2
 8002550:	f7fd fdc8 	bl	80000e4 <__udivsi3>
 8002554:	0003      	movs	r3, r0
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	2b0f      	cmp	r3, #15
 800255c:	d90a      	bls.n	8002574 <UART_SetConfig+0x4cc>
 800255e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	429a      	cmp	r2, r3
 8002566:	d205      	bcs.n	8002574 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	b29a      	uxth	r2, r3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	e005      	b.n	8002580 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002574:	231a      	movs	r3, #26
 8002576:	2218      	movs	r2, #24
 8002578:	189b      	adds	r3, r3, r2
 800257a:	19db      	adds	r3, r3, r7
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2200      	movs	r2, #0
 8002584:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2200      	movs	r2, #0
 800258a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800258c:	231a      	movs	r3, #26
 800258e:	2218      	movs	r2, #24
 8002590:	189b      	adds	r3, r3, r2
 8002592:	19db      	adds	r3, r3, r7
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b00e      	add	sp, #56	@ 0x38
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	08003f94 	.word	0x08003f94

080025b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	2208      	movs	r2, #8
 80025be:	4013      	ands	r3, r2
 80025c0:	d00b      	beq.n	80025da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a4a      	ldr	r2, [pc, #296]	@ (80026f4 <UART_AdvFeatureConfig+0x144>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d00b      	beq.n	80025fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a43      	ldr	r2, [pc, #268]	@ (80026f8 <UART_AdvFeatureConfig+0x148>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d00b      	beq.n	800261e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a3b      	ldr	r2, [pc, #236]	@ (80026fc <UART_AdvFeatureConfig+0x14c>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d00b      	beq.n	8002640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <UART_AdvFeatureConfig+0x150>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d00b      	beq.n	8002662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a2c      	ldr	r2, [pc, #176]	@ (8002704 <UART_AdvFeatureConfig+0x154>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2220      	movs	r2, #32
 8002668:	4013      	ands	r3, r2
 800266a:	d00b      	beq.n	8002684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4a25      	ldr	r2, [pc, #148]	@ (8002708 <UART_AdvFeatureConfig+0x158>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	2240      	movs	r2, #64	@ 0x40
 800268a:	4013      	ands	r3, r2
 800268c:	d01d      	beq.n	80026ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <UART_AdvFeatureConfig+0x15c>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	035b      	lsls	r3, r3, #13
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10b      	bne.n	80026ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a15      	ldr	r2, [pc, #84]	@ (8002710 <UART_AdvFeatureConfig+0x160>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	4013      	ands	r3, r2
 80026d2:	d00b      	beq.n	80026ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a0e      	ldr	r2, [pc, #56]	@ (8002714 <UART_AdvFeatureConfig+0x164>)
 80026dc:	4013      	ands	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
  }
}
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	ffff7fff 	.word	0xffff7fff
 80026f8:	fffdffff 	.word	0xfffdffff
 80026fc:	fffeffff 	.word	0xfffeffff
 8002700:	fffbffff 	.word	0xfffbffff
 8002704:	ffffefff 	.word	0xffffefff
 8002708:	ffffdfff 	.word	0xffffdfff
 800270c:	ffefffff 	.word	0xffefffff
 8002710:	ff9fffff 	.word	0xff9fffff
 8002714:	fff7ffff 	.word	0xfff7ffff

08002718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b092      	sub	sp, #72	@ 0x48
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2284      	movs	r2, #132	@ 0x84
 8002724:	2100      	movs	r1, #0
 8002726:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002728:	f7fe fa1c 	bl	8000b64 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2208      	movs	r2, #8
 8002738:	4013      	ands	r3, r2
 800273a:	2b08      	cmp	r3, #8
 800273c:	d12c      	bne.n	8002798 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800273e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	0391      	lsls	r1, r2, #14
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4a46      	ldr	r2, [pc, #280]	@ (8002860 <UART_CheckIdleState+0x148>)
 8002748:	9200      	str	r2, [sp, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	f000 f88c 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d021      	beq.n	8002798 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800275e:	2301      	movs	r3, #1
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	438a      	bics	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2278      	movs	r2, #120	@ 0x78
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e05f      	b.n	8002858 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2204      	movs	r2, #4
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d146      	bne.n	8002834 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	03d1      	lsls	r1, r2, #15
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002860 <UART_CheckIdleState+0x148>)
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f000 f858 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d03b      	beq.n	8002834 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027bc:	f3ef 8310 	mrs	r3, PRIMASK
 80027c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80027c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c6:	2301      	movs	r3, #1
 80027c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	46c0      	nop			@ (mov r8, r8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4921      	ldr	r1, [pc, #132]	@ (8002864 <UART_CheckIdleState+0x14c>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80027f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f383 8810 	msr	PRIMASK, r3
}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	2120      	movs	r1, #32
 8002826:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2278      	movs	r2, #120	@ 0x78
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e011      	b.n	8002858 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2280      	movs	r2, #128	@ 0x80
 800283e:	2120      	movs	r1, #32
 8002840:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2278      	movs	r2, #120	@ 0x78
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b010      	add	sp, #64	@ 0x40
 800285e:	bd80      	pop	{r7, pc}
 8002860:	01ffffff 	.word	0x01ffffff
 8002864:	fffffedf 	.word	0xfffffedf

08002868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	1dfb      	adds	r3, r7, #7
 8002876:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002878:	e051      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3301      	adds	r3, #1
 800287e:	d04e      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002880:	f7fe f970 	bl	8000b64 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	429a      	cmp	r2, r3
 800288e:	d302      	bcc.n	8002896 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e051      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2204      	movs	r2, #4
 80028a2:	4013      	ands	r3, r2
 80028a4:	d03b      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0xb6>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b80      	cmp	r3, #128	@ 0x80
 80028aa:	d038      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0xb6>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b40      	cmp	r3, #64	@ 0x40
 80028b0:	d035      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2208      	movs	r2, #8
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d111      	bne.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2208      	movs	r2, #8
 80028c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f83c 	bl	8002948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2284      	movs	r2, #132	@ 0x84
 80028d4:	2108      	movs	r1, #8
 80028d6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2278      	movs	r2, #120	@ 0x78
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e02c      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	401a      	ands	r2, r3
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d112      	bne.n	800291e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2280      	movs	r2, #128	@ 0x80
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f81f 	bl	8002948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2284      	movs	r2, #132	@ 0x84
 800290e:	2120      	movs	r1, #32
 8002910:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2278      	movs	r2, #120	@ 0x78
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e00f      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	425a      	negs	r2, r3
 800292e:	4153      	adcs	r3, r2
 8002930:	b2db      	uxtb	r3, r3
 8002932:	001a      	movs	r2, r3
 8002934:	1dfb      	adds	r3, r7, #7
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d09e      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b004      	add	sp, #16
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08e      	sub	sp, #56	@ 0x38
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002950:	f3ef 8310 	mrs	r3, PRIMASK
 8002954:	617b      	str	r3, [r7, #20]
  return(result);
 8002956:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002958:	637b      	str	r3, [r7, #52]	@ 0x34
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f383 8810 	msr	PRIMASK, r3
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4926      	ldr	r1, [pc, #152]	@ (8002a0c <UART_EndRxTransfer+0xc4>)
 8002972:	400a      	ands	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f383 8810 	msr	PRIMASK, r3
}
 8002980:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002982:	f3ef 8310 	mrs	r3, PRIMASK
 8002986:	623b      	str	r3, [r7, #32]
  return(result);
 8002988:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
 800298c:	2301      	movs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	438a      	bics	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	f383 8810 	msr	PRIMASK, r3
}
 80029b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d118      	bne.n	80029ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029bc:	f3ef 8310 	mrs	r3, PRIMASK
 80029c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c6:	2301      	movs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2110      	movs	r1, #16
 80029de:	438a      	bics	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f383 8810 	msr	PRIMASK, r3
}
 80029ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2280      	movs	r2, #128	@ 0x80
 80029f2:	2120      	movs	r1, #32
 80029f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b00e      	add	sp, #56	@ 0x38
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	fffffedf 	.word	0xfffffedf

08002a10 <siprintf>:
 8002a10:	b40e      	push	{r1, r2, r3}
 8002a12:	b510      	push	{r4, lr}
 8002a14:	2400      	movs	r4, #0
 8002a16:	490c      	ldr	r1, [pc, #48]	@ (8002a48 <siprintf+0x38>)
 8002a18:	b09d      	sub	sp, #116	@ 0x74
 8002a1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002a1c:	9002      	str	r0, [sp, #8]
 8002a1e:	9006      	str	r0, [sp, #24]
 8002a20:	9107      	str	r1, [sp, #28]
 8002a22:	9104      	str	r1, [sp, #16]
 8002a24:	4809      	ldr	r0, [pc, #36]	@ (8002a4c <siprintf+0x3c>)
 8002a26:	490a      	ldr	r1, [pc, #40]	@ (8002a50 <siprintf+0x40>)
 8002a28:	cb04      	ldmia	r3!, {r2}
 8002a2a:	9105      	str	r1, [sp, #20]
 8002a2c:	6800      	ldr	r0, [r0, #0]
 8002a2e:	a902      	add	r1, sp, #8
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002a34:	f000 f9ee 	bl	8002e14 <_svfiprintf_r>
 8002a38:	9b02      	ldr	r3, [sp, #8]
 8002a3a:	701c      	strb	r4, [r3, #0]
 8002a3c:	b01d      	add	sp, #116	@ 0x74
 8002a3e:	bc10      	pop	{r4}
 8002a40:	bc08      	pop	{r3}
 8002a42:	b003      	add	sp, #12
 8002a44:	4718      	bx	r3
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	7fffffff 	.word	0x7fffffff
 8002a4c:	20000018 	.word	0x20000018
 8002a50:	ffff0208 	.word	0xffff0208

08002a54 <srand>:
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <srand+0x48>)
 8002a56:	b570      	push	{r4, r5, r6, lr}
 8002a58:	681d      	ldr	r5, [r3, #0]
 8002a5a:	0004      	movs	r4, r0
 8002a5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <srand+0x3c>
 8002a62:	2018      	movs	r0, #24
 8002a64:	f000 fad4 	bl	8003010 <malloc>
 8002a68:	1e02      	subs	r2, r0, #0
 8002a6a:	6328      	str	r0, [r5, #48]	@ 0x30
 8002a6c:	d104      	bne.n	8002a78 <srand+0x24>
 8002a6e:	2146      	movs	r1, #70	@ 0x46
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <srand+0x4c>)
 8002a72:	480c      	ldr	r0, [pc, #48]	@ (8002aa4 <srand+0x50>)
 8002a74:	f000 f950 	bl	8002d18 <__assert_func>
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <srand+0x54>)
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	6003      	str	r3, [r0, #0]
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <srand+0x58>)
 8002a80:	6043      	str	r3, [r0, #4]
 8002a82:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <srand+0x5c>)
 8002a84:	6083      	str	r3, [r0, #8]
 8002a86:	230b      	movs	r3, #11
 8002a88:	8183      	strh	r3, [r0, #12]
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	6110      	str	r0, [r2, #16]
 8002a8e:	6151      	str	r1, [r2, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002a94:	611c      	str	r4, [r3, #16]
 8002a96:	615a      	str	r2, [r3, #20]
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	20000018 	.word	0x20000018
 8002aa0:	08003fb8 	.word	0x08003fb8
 8002aa4:	08003fcf 	.word	0x08003fcf
 8002aa8:	abcd330e 	.word	0xabcd330e
 8002aac:	e66d1234 	.word	0xe66d1234
 8002ab0:	0005deec 	.word	0x0005deec

08002ab4 <rand>:
 8002ab4:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <rand+0x5c>)
 8002ab6:	b510      	push	{r4, lr}
 8002ab8:	681c      	ldr	r4, [r3, #0]
 8002aba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <rand+0x3a>
 8002ac0:	2018      	movs	r0, #24
 8002ac2:	f000 faa5 	bl	8003010 <malloc>
 8002ac6:	1e02      	subs	r2, r0, #0
 8002ac8:	6320      	str	r0, [r4, #48]	@ 0x30
 8002aca:	d104      	bne.n	8002ad6 <rand+0x22>
 8002acc:	2152      	movs	r1, #82	@ 0x52
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <rand+0x60>)
 8002ad0:	4811      	ldr	r0, [pc, #68]	@ (8002b18 <rand+0x64>)
 8002ad2:	f000 f921 	bl	8002d18 <__assert_func>
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <rand+0x68>)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	6003      	str	r3, [r0, #0]
 8002adc:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <rand+0x6c>)
 8002ade:	6043      	str	r3, [r0, #4]
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <rand+0x70>)
 8002ae2:	6083      	str	r3, [r0, #8]
 8002ae4:	230b      	movs	r3, #11
 8002ae6:	8183      	strh	r3, [r0, #12]
 8002ae8:	2001      	movs	r0, #1
 8002aea:	6110      	str	r0, [r2, #16]
 8002aec:	6151      	str	r1, [r2, #20]
 8002aee:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <rand+0x74>)
 8002af2:	6920      	ldr	r0, [r4, #16]
 8002af4:	6961      	ldr	r1, [r4, #20]
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <rand+0x78>)
 8002af8:	f7fd fc8a 	bl	8000410 <__aeabi_lmul>
 8002afc:	2201      	movs	r2, #1
 8002afe:	2300      	movs	r3, #0
 8002b00:	1880      	adds	r0, r0, r2
 8002b02:	4159      	adcs	r1, r3
 8002b04:	6120      	str	r0, [r4, #16]
 8002b06:	6161      	str	r1, [r4, #20]
 8002b08:	0048      	lsls	r0, r1, #1
 8002b0a:	0840      	lsrs	r0, r0, #1
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	20000018 	.word	0x20000018
 8002b14:	08003fb8 	.word	0x08003fb8
 8002b18:	08003fcf 	.word	0x08003fcf
 8002b1c:	abcd330e 	.word	0xabcd330e
 8002b20:	e66d1234 	.word	0xe66d1234
 8002b24:	0005deec 	.word	0x0005deec
 8002b28:	4c957f2d 	.word	0x4c957f2d
 8002b2c:	5851f42d 	.word	0x5851f42d

08002b30 <std>:
 8002b30:	2300      	movs	r3, #0
 8002b32:	b510      	push	{r4, lr}
 8002b34:	0004      	movs	r4, r0
 8002b36:	6003      	str	r3, [r0, #0]
 8002b38:	6043      	str	r3, [r0, #4]
 8002b3a:	6083      	str	r3, [r0, #8]
 8002b3c:	8181      	strh	r1, [r0, #12]
 8002b3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b40:	81c2      	strh	r2, [r0, #14]
 8002b42:	6103      	str	r3, [r0, #16]
 8002b44:	6143      	str	r3, [r0, #20]
 8002b46:	6183      	str	r3, [r0, #24]
 8002b48:	0019      	movs	r1, r3
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	305c      	adds	r0, #92	@ 0x5c
 8002b4e:	f000 f8b3 	bl	8002cb8 <memset>
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <std+0x50>)
 8002b54:	6224      	str	r4, [r4, #32]
 8002b56:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b58:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <std+0x54>)
 8002b5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <std+0x58>)
 8002b5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <std+0x5c>)
 8002b62:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b64:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <std+0x60>)
 8002b66:	429c      	cmp	r4, r3
 8002b68:	d005      	beq.n	8002b76 <std+0x46>
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <std+0x64>)
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	d002      	beq.n	8002b76 <std+0x46>
 8002b70:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <std+0x68>)
 8002b72:	429c      	cmp	r4, r3
 8002b74:	d103      	bne.n	8002b7e <std+0x4e>
 8002b76:	0020      	movs	r0, r4
 8002b78:	3058      	adds	r0, #88	@ 0x58
 8002b7a:	f000 f8c9 	bl	8002d10 <__retarget_lock_init_recursive>
 8002b7e:	bd10      	pop	{r4, pc}
 8002b80:	080035e5 	.word	0x080035e5
 8002b84:	0800360d 	.word	0x0800360d
 8002b88:	08003645 	.word	0x08003645
 8002b8c:	08003671 	.word	0x08003671
 8002b90:	20000144 	.word	0x20000144
 8002b94:	200001ac 	.word	0x200001ac
 8002b98:	20000214 	.word	0x20000214

08002b9c <stdio_exit_handler>:
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	4a03      	ldr	r2, [pc, #12]	@ (8002bac <stdio_exit_handler+0x10>)
 8002ba0:	4903      	ldr	r1, [pc, #12]	@ (8002bb0 <stdio_exit_handler+0x14>)
 8002ba2:	4804      	ldr	r0, [pc, #16]	@ (8002bb4 <stdio_exit_handler+0x18>)
 8002ba4:	f000 f86c 	bl	8002c80 <_fwalk_sglue>
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	2000000c 	.word	0x2000000c
 8002bb0:	0800356d 	.word	0x0800356d
 8002bb4:	2000001c 	.word	0x2000001c

08002bb8 <cleanup_stdio>:
 8002bb8:	6841      	ldr	r1, [r0, #4]
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <cleanup_stdio+0x30>)
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	0004      	movs	r4, r0
 8002bc0:	4299      	cmp	r1, r3
 8002bc2:	d001      	beq.n	8002bc8 <cleanup_stdio+0x10>
 8002bc4:	f000 fcd2 	bl	800356c <_fflush_r>
 8002bc8:	68a1      	ldr	r1, [r4, #8]
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <cleanup_stdio+0x34>)
 8002bcc:	4299      	cmp	r1, r3
 8002bce:	d002      	beq.n	8002bd6 <cleanup_stdio+0x1e>
 8002bd0:	0020      	movs	r0, r4
 8002bd2:	f000 fccb 	bl	800356c <_fflush_r>
 8002bd6:	68e1      	ldr	r1, [r4, #12]
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <cleanup_stdio+0x38>)
 8002bda:	4299      	cmp	r1, r3
 8002bdc:	d002      	beq.n	8002be4 <cleanup_stdio+0x2c>
 8002bde:	0020      	movs	r0, r4
 8002be0:	f000 fcc4 	bl	800356c <_fflush_r>
 8002be4:	bd10      	pop	{r4, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	20000144 	.word	0x20000144
 8002bec:	200001ac 	.word	0x200001ac
 8002bf0:	20000214 	.word	0x20000214

08002bf4 <global_stdio_init.part.0>:
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <global_stdio_init.part.0+0x28>)
 8002bf8:	4a09      	ldr	r2, [pc, #36]	@ (8002c20 <global_stdio_init.part.0+0x2c>)
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	4809      	ldr	r0, [pc, #36]	@ (8002c24 <global_stdio_init.part.0+0x30>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	f7ff ff95 	bl	8002b30 <std>
 8002c06:	2201      	movs	r2, #1
 8002c08:	2109      	movs	r1, #9
 8002c0a:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <global_stdio_init.part.0+0x34>)
 8002c0c:	f7ff ff90 	bl	8002b30 <std>
 8002c10:	2202      	movs	r2, #2
 8002c12:	2112      	movs	r1, #18
 8002c14:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <global_stdio_init.part.0+0x38>)
 8002c16:	f7ff ff8b 	bl	8002b30 <std>
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	2000027c 	.word	0x2000027c
 8002c20:	08002b9d 	.word	0x08002b9d
 8002c24:	20000144 	.word	0x20000144
 8002c28:	200001ac 	.word	0x200001ac
 8002c2c:	20000214 	.word	0x20000214

08002c30 <__sfp_lock_acquire>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <__sfp_lock_acquire+0xc>)
 8002c34:	f000 f86d 	bl	8002d12 <__retarget_lock_acquire_recursive>
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	20000281 	.word	0x20000281

08002c40 <__sfp_lock_release>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <__sfp_lock_release+0xc>)
 8002c44:	f000 f866 	bl	8002d14 <__retarget_lock_release_recursive>
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	20000281 	.word	0x20000281

08002c50 <__sinit>:
 8002c50:	b510      	push	{r4, lr}
 8002c52:	0004      	movs	r4, r0
 8002c54:	f7ff ffec 	bl	8002c30 <__sfp_lock_acquire>
 8002c58:	6a23      	ldr	r3, [r4, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <__sinit+0x14>
 8002c5e:	f7ff ffef 	bl	8002c40 <__sfp_lock_release>
 8002c62:	bd10      	pop	{r4, pc}
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <__sinit+0x28>)
 8002c66:	6223      	str	r3, [r4, #32]
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <__sinit+0x2c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f6      	bne.n	8002c5e <__sinit+0xe>
 8002c70:	f7ff ffc0 	bl	8002bf4 <global_stdio_init.part.0>
 8002c74:	e7f3      	b.n	8002c5e <__sinit+0xe>
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	08002bb9 	.word	0x08002bb9
 8002c7c:	2000027c 	.word	0x2000027c

08002c80 <_fwalk_sglue>:
 8002c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c82:	0014      	movs	r4, r2
 8002c84:	2600      	movs	r6, #0
 8002c86:	9000      	str	r0, [sp, #0]
 8002c88:	9101      	str	r1, [sp, #4]
 8002c8a:	68a5      	ldr	r5, [r4, #8]
 8002c8c:	6867      	ldr	r7, [r4, #4]
 8002c8e:	3f01      	subs	r7, #1
 8002c90:	d504      	bpl.n	8002c9c <_fwalk_sglue+0x1c>
 8002c92:	6824      	ldr	r4, [r4, #0]
 8002c94:	2c00      	cmp	r4, #0
 8002c96:	d1f8      	bne.n	8002c8a <_fwalk_sglue+0xa>
 8002c98:	0030      	movs	r0, r6
 8002c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c9c:	89ab      	ldrh	r3, [r5, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d908      	bls.n	8002cb4 <_fwalk_sglue+0x34>
 8002ca2:	220e      	movs	r2, #14
 8002ca4:	5eab      	ldrsh	r3, [r5, r2]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	d004      	beq.n	8002cb4 <_fwalk_sglue+0x34>
 8002caa:	0029      	movs	r1, r5
 8002cac:	9800      	ldr	r0, [sp, #0]
 8002cae:	9b01      	ldr	r3, [sp, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	4306      	orrs	r6, r0
 8002cb4:	3568      	adds	r5, #104	@ 0x68
 8002cb6:	e7ea      	b.n	8002c8e <_fwalk_sglue+0xe>

08002cb8 <memset>:
 8002cb8:	0003      	movs	r3, r0
 8002cba:	1882      	adds	r2, r0, r2
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d100      	bne.n	8002cc2 <memset+0xa>
 8002cc0:	4770      	bx	lr
 8002cc2:	7019      	strb	r1, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	e7f9      	b.n	8002cbc <memset+0x4>

08002cc8 <__libc_init_array>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	2600      	movs	r6, #0
 8002ccc:	4c0c      	ldr	r4, [pc, #48]	@ (8002d00 <__libc_init_array+0x38>)
 8002cce:	4d0d      	ldr	r5, [pc, #52]	@ (8002d04 <__libc_init_array+0x3c>)
 8002cd0:	1b64      	subs	r4, r4, r5
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	42a6      	cmp	r6, r4
 8002cd6:	d109      	bne.n	8002cec <__libc_init_array+0x24>
 8002cd8:	2600      	movs	r6, #0
 8002cda:	f001 f9dd 	bl	8004098 <_init>
 8002cde:	4c0a      	ldr	r4, [pc, #40]	@ (8002d08 <__libc_init_array+0x40>)
 8002ce0:	4d0a      	ldr	r5, [pc, #40]	@ (8002d0c <__libc_init_array+0x44>)
 8002ce2:	1b64      	subs	r4, r4, r5
 8002ce4:	10a4      	asrs	r4, r4, #2
 8002ce6:	42a6      	cmp	r6, r4
 8002ce8:	d105      	bne.n	8002cf6 <__libc_init_array+0x2e>
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	00b3      	lsls	r3, r6, #2
 8002cee:	58eb      	ldr	r3, [r5, r3]
 8002cf0:	4798      	blx	r3
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7ee      	b.n	8002cd4 <__libc_init_array+0xc>
 8002cf6:	00b3      	lsls	r3, r6, #2
 8002cf8:	58eb      	ldr	r3, [r5, r3]
 8002cfa:	4798      	blx	r3
 8002cfc:	3601      	adds	r6, #1
 8002cfe:	e7f2      	b.n	8002ce6 <__libc_init_array+0x1e>
	...

08002d10 <__retarget_lock_init_recursive>:
 8002d10:	4770      	bx	lr

08002d12 <__retarget_lock_acquire_recursive>:
 8002d12:	4770      	bx	lr

08002d14 <__retarget_lock_release_recursive>:
 8002d14:	4770      	bx	lr
	...

08002d18 <__assert_func>:
 8002d18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d1a:	0014      	movs	r4, r2
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <__assert_func+0x2c>)
 8002d20:	0005      	movs	r5, r0
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	000e      	movs	r6, r1
 8002d26:	68d8      	ldr	r0, [r3, #12]
 8002d28:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <__assert_func+0x30>)
 8002d2a:	2c00      	cmp	r4, #0
 8002d2c:	d101      	bne.n	8002d32 <__assert_func+0x1a>
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <__assert_func+0x34>)
 8002d30:	001c      	movs	r4, r3
 8002d32:	4907      	ldr	r1, [pc, #28]	@ (8002d50 <__assert_func+0x38>)
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	9402      	str	r4, [sp, #8]
 8002d38:	002b      	movs	r3, r5
 8002d3a:	9600      	str	r6, [sp, #0]
 8002d3c:	f000 fc9e 	bl	800367c <fiprintf>
 8002d40:	f000 fd62 	bl	8003808 <abort>
 8002d44:	20000018 	.word	0x20000018
 8002d48:	08004027 	.word	0x08004027
 8002d4c:	08004062 	.word	0x08004062
 8002d50:	08004034 	.word	0x08004034

08002d54 <__ssputs_r>:
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	688e      	ldr	r6, [r1, #8]
 8002d58:	b085      	sub	sp, #20
 8002d5a:	001f      	movs	r7, r3
 8002d5c:	000c      	movs	r4, r1
 8002d5e:	680b      	ldr	r3, [r1, #0]
 8002d60:	9002      	str	r0, [sp, #8]
 8002d62:	9203      	str	r2, [sp, #12]
 8002d64:	42be      	cmp	r6, r7
 8002d66:	d830      	bhi.n	8002dca <__ssputs_r+0x76>
 8002d68:	210c      	movs	r1, #12
 8002d6a:	5e62      	ldrsh	r2, [r4, r1]
 8002d6c:	2190      	movs	r1, #144	@ 0x90
 8002d6e:	00c9      	lsls	r1, r1, #3
 8002d70:	420a      	tst	r2, r1
 8002d72:	d028      	beq.n	8002dc6 <__ssputs_r+0x72>
 8002d74:	2003      	movs	r0, #3
 8002d76:	6921      	ldr	r1, [r4, #16]
 8002d78:	1a5b      	subs	r3, r3, r1
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	6963      	ldr	r3, [r4, #20]
 8002d7e:	4343      	muls	r3, r0
 8002d80:	9801      	ldr	r0, [sp, #4]
 8002d82:	0fdd      	lsrs	r5, r3, #31
 8002d84:	18ed      	adds	r5, r5, r3
 8002d86:	1c7b      	adds	r3, r7, #1
 8002d88:	181b      	adds	r3, r3, r0
 8002d8a:	106d      	asrs	r5, r5, #1
 8002d8c:	42ab      	cmp	r3, r5
 8002d8e:	d900      	bls.n	8002d92 <__ssputs_r+0x3e>
 8002d90:	001d      	movs	r5, r3
 8002d92:	0552      	lsls	r2, r2, #21
 8002d94:	d528      	bpl.n	8002de8 <__ssputs_r+0x94>
 8002d96:	0029      	movs	r1, r5
 8002d98:	9802      	ldr	r0, [sp, #8]
 8002d9a:	f000 f965 	bl	8003068 <_malloc_r>
 8002d9e:	1e06      	subs	r6, r0, #0
 8002da0:	d02c      	beq.n	8002dfc <__ssputs_r+0xa8>
 8002da2:	9a01      	ldr	r2, [sp, #4]
 8002da4:	6921      	ldr	r1, [r4, #16]
 8002da6:	f000 fd26 	bl	80037f6 <memcpy>
 8002daa:	89a2      	ldrh	r2, [r4, #12]
 8002dac:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <__ssputs_r+0xbc>)
 8002dae:	401a      	ands	r2, r3
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	4313      	orrs	r3, r2
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	6126      	str	r6, [r4, #16]
 8002dba:	18f6      	adds	r6, r6, r3
 8002dbc:	6026      	str	r6, [r4, #0]
 8002dbe:	003e      	movs	r6, r7
 8002dc0:	6165      	str	r5, [r4, #20]
 8002dc2:	1aed      	subs	r5, r5, r3
 8002dc4:	60a5      	str	r5, [r4, #8]
 8002dc6:	42be      	cmp	r6, r7
 8002dc8:	d900      	bls.n	8002dcc <__ssputs_r+0x78>
 8002dca:	003e      	movs	r6, r7
 8002dcc:	0032      	movs	r2, r6
 8002dce:	9903      	ldr	r1, [sp, #12]
 8002dd0:	6820      	ldr	r0, [r4, #0]
 8002dd2:	f000 fc93 	bl	80036fc <memmove>
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	68a3      	ldr	r3, [r4, #8]
 8002dda:	1b9b      	subs	r3, r3, r6
 8002ddc:	60a3      	str	r3, [r4, #8]
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	199b      	adds	r3, r3, r6
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	b005      	add	sp, #20
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	002a      	movs	r2, r5
 8002dea:	9802      	ldr	r0, [sp, #8]
 8002dec:	f000 fc56 	bl	800369c <_realloc_r>
 8002df0:	1e06      	subs	r6, r0, #0
 8002df2:	d1e0      	bne.n	8002db6 <__ssputs_r+0x62>
 8002df4:	6921      	ldr	r1, [r4, #16]
 8002df6:	9802      	ldr	r0, [sp, #8]
 8002df8:	f000 fd0e 	bl	8003818 <_free_r>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	2001      	movs	r0, #1
 8002e00:	9a02      	ldr	r2, [sp, #8]
 8002e02:	4240      	negs	r0, r0
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	89a2      	ldrh	r2, [r4, #12]
 8002e08:	3334      	adds	r3, #52	@ 0x34
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	81a3      	strh	r3, [r4, #12]
 8002e0e:	e7e9      	b.n	8002de4 <__ssputs_r+0x90>
 8002e10:	fffffb7f 	.word	0xfffffb7f

08002e14 <_svfiprintf_r>:
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b0a1      	sub	sp, #132	@ 0x84
 8002e18:	9003      	str	r0, [sp, #12]
 8002e1a:	001d      	movs	r5, r3
 8002e1c:	898b      	ldrh	r3, [r1, #12]
 8002e1e:	000f      	movs	r7, r1
 8002e20:	0016      	movs	r6, r2
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	d511      	bpl.n	8002e4a <_svfiprintf_r+0x36>
 8002e26:	690b      	ldr	r3, [r1, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10e      	bne.n	8002e4a <_svfiprintf_r+0x36>
 8002e2c:	2140      	movs	r1, #64	@ 0x40
 8002e2e:	f000 f91b 	bl	8003068 <_malloc_r>
 8002e32:	6038      	str	r0, [r7, #0]
 8002e34:	6138      	str	r0, [r7, #16]
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d105      	bne.n	8002e46 <_svfiprintf_r+0x32>
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	9a03      	ldr	r2, [sp, #12]
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	2001      	movs	r0, #1
 8002e42:	4240      	negs	r0, r0
 8002e44:	e0cf      	b.n	8002fe6 <_svfiprintf_r+0x1d2>
 8002e46:	2340      	movs	r3, #64	@ 0x40
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	ac08      	add	r4, sp, #32
 8002e4e:	6163      	str	r3, [r4, #20]
 8002e50:	3320      	adds	r3, #32
 8002e52:	7663      	strb	r3, [r4, #25]
 8002e54:	3310      	adds	r3, #16
 8002e56:	76a3      	strb	r3, [r4, #26]
 8002e58:	9507      	str	r5, [sp, #28]
 8002e5a:	0035      	movs	r5, r6
 8002e5c:	782b      	ldrb	r3, [r5, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <_svfiprintf_r+0x52>
 8002e62:	2b25      	cmp	r3, #37	@ 0x25
 8002e64:	d148      	bne.n	8002ef8 <_svfiprintf_r+0xe4>
 8002e66:	1bab      	subs	r3, r5, r6
 8002e68:	9305      	str	r3, [sp, #20]
 8002e6a:	42b5      	cmp	r5, r6
 8002e6c:	d00b      	beq.n	8002e86 <_svfiprintf_r+0x72>
 8002e6e:	0032      	movs	r2, r6
 8002e70:	0039      	movs	r1, r7
 8002e72:	9803      	ldr	r0, [sp, #12]
 8002e74:	f7ff ff6e 	bl	8002d54 <__ssputs_r>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d100      	bne.n	8002e7e <_svfiprintf_r+0x6a>
 8002e7c:	e0ae      	b.n	8002fdc <_svfiprintf_r+0x1c8>
 8002e7e:	6963      	ldr	r3, [r4, #20]
 8002e80:	9a05      	ldr	r2, [sp, #20]
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	6163      	str	r3, [r4, #20]
 8002e86:	782b      	ldrb	r3, [r5, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d100      	bne.n	8002e8e <_svfiprintf_r+0x7a>
 8002e8c:	e0a6      	b.n	8002fdc <_svfiprintf_r+0x1c8>
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2300      	movs	r3, #0
 8002e92:	4252      	negs	r2, r2
 8002e94:	6062      	str	r2, [r4, #4]
 8002e96:	a904      	add	r1, sp, #16
 8002e98:	3254      	adds	r2, #84	@ 0x54
 8002e9a:	1852      	adds	r2, r2, r1
 8002e9c:	1c6e      	adds	r6, r5, #1
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	60e3      	str	r3, [r4, #12]
 8002ea2:	60a3      	str	r3, [r4, #8]
 8002ea4:	7013      	strb	r3, [r2, #0]
 8002ea6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002ea8:	4b54      	ldr	r3, [pc, #336]	@ (8002ffc <_svfiprintf_r+0x1e8>)
 8002eaa:	2205      	movs	r2, #5
 8002eac:	0018      	movs	r0, r3
 8002eae:	7831      	ldrb	r1, [r6, #0]
 8002eb0:	9305      	str	r3, [sp, #20]
 8002eb2:	f000 fc95 	bl	80037e0 <memchr>
 8002eb6:	1c75      	adds	r5, r6, #1
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d11f      	bne.n	8002efc <_svfiprintf_r+0xe8>
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	06d3      	lsls	r3, r2, #27
 8002ec0:	d504      	bpl.n	8002ecc <_svfiprintf_r+0xb8>
 8002ec2:	2353      	movs	r3, #83	@ 0x53
 8002ec4:	a904      	add	r1, sp, #16
 8002ec6:	185b      	adds	r3, r3, r1
 8002ec8:	2120      	movs	r1, #32
 8002eca:	7019      	strb	r1, [r3, #0]
 8002ecc:	0713      	lsls	r3, r2, #28
 8002ece:	d504      	bpl.n	8002eda <_svfiprintf_r+0xc6>
 8002ed0:	2353      	movs	r3, #83	@ 0x53
 8002ed2:	a904      	add	r1, sp, #16
 8002ed4:	185b      	adds	r3, r3, r1
 8002ed6:	212b      	movs	r1, #43	@ 0x2b
 8002ed8:	7019      	strb	r1, [r3, #0]
 8002eda:	7833      	ldrb	r3, [r6, #0]
 8002edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ede:	d016      	beq.n	8002f0e <_svfiprintf_r+0xfa>
 8002ee0:	0035      	movs	r5, r6
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	68e3      	ldr	r3, [r4, #12]
 8002ee8:	782a      	ldrb	r2, [r5, #0]
 8002eea:	1c6e      	adds	r6, r5, #1
 8002eec:	3a30      	subs	r2, #48	@ 0x30
 8002eee:	2a09      	cmp	r2, #9
 8002ef0:	d950      	bls.n	8002f94 <_svfiprintf_r+0x180>
 8002ef2:	2900      	cmp	r1, #0
 8002ef4:	d111      	bne.n	8002f1a <_svfiprintf_r+0x106>
 8002ef6:	e017      	b.n	8002f28 <_svfiprintf_r+0x114>
 8002ef8:	3501      	adds	r5, #1
 8002efa:	e7af      	b.n	8002e5c <_svfiprintf_r+0x48>
 8002efc:	9b05      	ldr	r3, [sp, #20]
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	1ac0      	subs	r0, r0, r3
 8002f02:	2301      	movs	r3, #1
 8002f04:	4083      	lsls	r3, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	002e      	movs	r6, r5
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	e7cc      	b.n	8002ea8 <_svfiprintf_r+0x94>
 8002f0e:	9b07      	ldr	r3, [sp, #28]
 8002f10:	1d19      	adds	r1, r3, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	9107      	str	r1, [sp, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db01      	blt.n	8002f1e <_svfiprintf_r+0x10a>
 8002f1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f1c:	e004      	b.n	8002f28 <_svfiprintf_r+0x114>
 8002f1e:	425b      	negs	r3, r3
 8002f20:	60e3      	str	r3, [r4, #12]
 8002f22:	2302      	movs	r3, #2
 8002f24:	4313      	orrs	r3, r2
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	782b      	ldrb	r3, [r5, #0]
 8002f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f2c:	d10c      	bne.n	8002f48 <_svfiprintf_r+0x134>
 8002f2e:	786b      	ldrb	r3, [r5, #1]
 8002f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f32:	d134      	bne.n	8002f9e <_svfiprintf_r+0x18a>
 8002f34:	9b07      	ldr	r3, [sp, #28]
 8002f36:	3502      	adds	r5, #2
 8002f38:	1d1a      	adds	r2, r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	9207      	str	r2, [sp, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da01      	bge.n	8002f46 <_svfiprintf_r+0x132>
 8002f42:	2301      	movs	r3, #1
 8002f44:	425b      	negs	r3, r3
 8002f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f48:	4e2d      	ldr	r6, [pc, #180]	@ (8003000 <_svfiprintf_r+0x1ec>)
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	0030      	movs	r0, r6
 8002f4e:	7829      	ldrb	r1, [r5, #0]
 8002f50:	f000 fc46 	bl	80037e0 <memchr>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d006      	beq.n	8002f66 <_svfiprintf_r+0x152>
 8002f58:	2340      	movs	r3, #64	@ 0x40
 8002f5a:	1b80      	subs	r0, r0, r6
 8002f5c:	4083      	lsls	r3, r0
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	3501      	adds	r5, #1
 8002f62:	4313      	orrs	r3, r2
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	7829      	ldrb	r1, [r5, #0]
 8002f68:	2206      	movs	r2, #6
 8002f6a:	4826      	ldr	r0, [pc, #152]	@ (8003004 <_svfiprintf_r+0x1f0>)
 8002f6c:	1c6e      	adds	r6, r5, #1
 8002f6e:	7621      	strb	r1, [r4, #24]
 8002f70:	f000 fc36 	bl	80037e0 <memchr>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d038      	beq.n	8002fea <_svfiprintf_r+0x1d6>
 8002f78:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <_svfiprintf_r+0x1f4>)
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d122      	bne.n	8002fc4 <_svfiprintf_r+0x1b0>
 8002f7e:	2207      	movs	r2, #7
 8002f80:	9b07      	ldr	r3, [sp, #28]
 8002f82:	3307      	adds	r3, #7
 8002f84:	4393      	bics	r3, r2
 8002f86:	3308      	adds	r3, #8
 8002f88:	9307      	str	r3, [sp, #28]
 8002f8a:	6963      	ldr	r3, [r4, #20]
 8002f8c:	9a04      	ldr	r2, [sp, #16]
 8002f8e:	189b      	adds	r3, r3, r2
 8002f90:	6163      	str	r3, [r4, #20]
 8002f92:	e762      	b.n	8002e5a <_svfiprintf_r+0x46>
 8002f94:	4343      	muls	r3, r0
 8002f96:	0035      	movs	r5, r6
 8002f98:	2101      	movs	r1, #1
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	e7a4      	b.n	8002ee8 <_svfiprintf_r+0xd4>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	3501      	adds	r5, #1
 8002fa6:	6063      	str	r3, [r4, #4]
 8002fa8:	782a      	ldrb	r2, [r5, #0]
 8002faa:	1c6e      	adds	r6, r5, #1
 8002fac:	3a30      	subs	r2, #48	@ 0x30
 8002fae:	2a09      	cmp	r2, #9
 8002fb0:	d903      	bls.n	8002fba <_svfiprintf_r+0x1a6>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0c8      	beq.n	8002f48 <_svfiprintf_r+0x134>
 8002fb6:	9109      	str	r1, [sp, #36]	@ 0x24
 8002fb8:	e7c6      	b.n	8002f48 <_svfiprintf_r+0x134>
 8002fba:	4341      	muls	r1, r0
 8002fbc:	0035      	movs	r5, r6
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	1889      	adds	r1, r1, r2
 8002fc2:	e7f1      	b.n	8002fa8 <_svfiprintf_r+0x194>
 8002fc4:	aa07      	add	r2, sp, #28
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	0021      	movs	r1, r4
 8002fca:	003a      	movs	r2, r7
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <_svfiprintf_r+0x1f8>)
 8002fce:	9803      	ldr	r0, [sp, #12]
 8002fd0:	e000      	b.n	8002fd4 <_svfiprintf_r+0x1c0>
 8002fd2:	bf00      	nop
 8002fd4:	9004      	str	r0, [sp, #16]
 8002fd6:	9b04      	ldr	r3, [sp, #16]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	d1d6      	bne.n	8002f8a <_svfiprintf_r+0x176>
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002fe0:	065b      	lsls	r3, r3, #25
 8002fe2:	d500      	bpl.n	8002fe6 <_svfiprintf_r+0x1d2>
 8002fe4:	e72c      	b.n	8002e40 <_svfiprintf_r+0x2c>
 8002fe6:	b021      	add	sp, #132	@ 0x84
 8002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fea:	aa07      	add	r2, sp, #28
 8002fec:	9200      	str	r2, [sp, #0]
 8002fee:	0021      	movs	r1, r4
 8002ff0:	003a      	movs	r2, r7
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <_svfiprintf_r+0x1f8>)
 8002ff4:	9803      	ldr	r0, [sp, #12]
 8002ff6:	f000 f927 	bl	8003248 <_printf_i>
 8002ffa:	e7eb      	b.n	8002fd4 <_svfiprintf_r+0x1c0>
 8002ffc:	08004063 	.word	0x08004063
 8003000:	08004069 	.word	0x08004069
 8003004:	0800406d 	.word	0x0800406d
 8003008:	00000000 	.word	0x00000000
 800300c:	08002d55 	.word	0x08002d55

08003010 <malloc>:
 8003010:	b510      	push	{r4, lr}
 8003012:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <malloc+0x10>)
 8003014:	0001      	movs	r1, r0
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	f000 f826 	bl	8003068 <_malloc_r>
 800301c:	bd10      	pop	{r4, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	20000018 	.word	0x20000018

08003024 <sbrk_aligned>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4e0f      	ldr	r6, [pc, #60]	@ (8003064 <sbrk_aligned+0x40>)
 8003028:	000d      	movs	r5, r1
 800302a:	6831      	ldr	r1, [r6, #0]
 800302c:	0004      	movs	r4, r0
 800302e:	2900      	cmp	r1, #0
 8003030:	d102      	bne.n	8003038 <sbrk_aligned+0x14>
 8003032:	f000 fb9d 	bl	8003770 <_sbrk_r>
 8003036:	6030      	str	r0, [r6, #0]
 8003038:	0029      	movs	r1, r5
 800303a:	0020      	movs	r0, r4
 800303c:	f000 fb98 	bl	8003770 <_sbrk_r>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d103      	bne.n	800304c <sbrk_aligned+0x28>
 8003044:	2501      	movs	r5, #1
 8003046:	426d      	negs	r5, r5
 8003048:	0028      	movs	r0, r5
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	2303      	movs	r3, #3
 800304e:	1cc5      	adds	r5, r0, #3
 8003050:	439d      	bics	r5, r3
 8003052:	42a8      	cmp	r0, r5
 8003054:	d0f8      	beq.n	8003048 <sbrk_aligned+0x24>
 8003056:	1a29      	subs	r1, r5, r0
 8003058:	0020      	movs	r0, r4
 800305a:	f000 fb89 	bl	8003770 <_sbrk_r>
 800305e:	3001      	adds	r0, #1
 8003060:	d1f2      	bne.n	8003048 <sbrk_aligned+0x24>
 8003062:	e7ef      	b.n	8003044 <sbrk_aligned+0x20>
 8003064:	20000284 	.word	0x20000284

08003068 <_malloc_r>:
 8003068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800306a:	2203      	movs	r2, #3
 800306c:	1ccb      	adds	r3, r1, #3
 800306e:	4393      	bics	r3, r2
 8003070:	3308      	adds	r3, #8
 8003072:	0005      	movs	r5, r0
 8003074:	001f      	movs	r7, r3
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d234      	bcs.n	80030e4 <_malloc_r+0x7c>
 800307a:	270c      	movs	r7, #12
 800307c:	42b9      	cmp	r1, r7
 800307e:	d833      	bhi.n	80030e8 <_malloc_r+0x80>
 8003080:	0028      	movs	r0, r5
 8003082:	f000 fa9f 	bl	80035c4 <__malloc_lock>
 8003086:	4e37      	ldr	r6, [pc, #220]	@ (8003164 <_malloc_r+0xfc>)
 8003088:	6833      	ldr	r3, [r6, #0]
 800308a:	001c      	movs	r4, r3
 800308c:	2c00      	cmp	r4, #0
 800308e:	d12f      	bne.n	80030f0 <_malloc_r+0x88>
 8003090:	0039      	movs	r1, r7
 8003092:	0028      	movs	r0, r5
 8003094:	f7ff ffc6 	bl	8003024 <sbrk_aligned>
 8003098:	0004      	movs	r4, r0
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d15f      	bne.n	800315e <_malloc_r+0xf6>
 800309e:	6834      	ldr	r4, [r6, #0]
 80030a0:	9400      	str	r4, [sp, #0]
 80030a2:	9b00      	ldr	r3, [sp, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d14a      	bne.n	800313e <_malloc_r+0xd6>
 80030a8:	2c00      	cmp	r4, #0
 80030aa:	d052      	beq.n	8003152 <_malloc_r+0xea>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	0028      	movs	r0, r5
 80030b0:	18e3      	adds	r3, r4, r3
 80030b2:	9900      	ldr	r1, [sp, #0]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	f000 fb5b 	bl	8003770 <_sbrk_r>
 80030ba:	9b01      	ldr	r3, [sp, #4]
 80030bc:	4283      	cmp	r3, r0
 80030be:	d148      	bne.n	8003152 <_malloc_r+0xea>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	0028      	movs	r0, r5
 80030c4:	1aff      	subs	r7, r7, r3
 80030c6:	0039      	movs	r1, r7
 80030c8:	f7ff ffac 	bl	8003024 <sbrk_aligned>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d040      	beq.n	8003152 <_malloc_r+0xea>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	6833      	ldr	r3, [r6, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	2a00      	cmp	r2, #0
 80030dc:	d133      	bne.n	8003146 <_malloc_r+0xde>
 80030de:	9b00      	ldr	r3, [sp, #0]
 80030e0:	6033      	str	r3, [r6, #0]
 80030e2:	e019      	b.n	8003118 <_malloc_r+0xb0>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	dac9      	bge.n	800307c <_malloc_r+0x14>
 80030e8:	230c      	movs	r3, #12
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	2000      	movs	r0, #0
 80030ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030f0:	6821      	ldr	r1, [r4, #0]
 80030f2:	1bc9      	subs	r1, r1, r7
 80030f4:	d420      	bmi.n	8003138 <_malloc_r+0xd0>
 80030f6:	290b      	cmp	r1, #11
 80030f8:	d90a      	bls.n	8003110 <_malloc_r+0xa8>
 80030fa:	19e2      	adds	r2, r4, r7
 80030fc:	6027      	str	r7, [r4, #0]
 80030fe:	42a3      	cmp	r3, r4
 8003100:	d104      	bne.n	800310c <_malloc_r+0xa4>
 8003102:	6032      	str	r2, [r6, #0]
 8003104:	6863      	ldr	r3, [r4, #4]
 8003106:	6011      	str	r1, [r2, #0]
 8003108:	6053      	str	r3, [r2, #4]
 800310a:	e005      	b.n	8003118 <_malloc_r+0xb0>
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	e7f9      	b.n	8003104 <_malloc_r+0x9c>
 8003110:	6862      	ldr	r2, [r4, #4]
 8003112:	42a3      	cmp	r3, r4
 8003114:	d10e      	bne.n	8003134 <_malloc_r+0xcc>
 8003116:	6032      	str	r2, [r6, #0]
 8003118:	0028      	movs	r0, r5
 800311a:	f000 fa5b 	bl	80035d4 <__malloc_unlock>
 800311e:	0020      	movs	r0, r4
 8003120:	2207      	movs	r2, #7
 8003122:	300b      	adds	r0, #11
 8003124:	1d23      	adds	r3, r4, #4
 8003126:	4390      	bics	r0, r2
 8003128:	1ac2      	subs	r2, r0, r3
 800312a:	4298      	cmp	r0, r3
 800312c:	d0df      	beq.n	80030ee <_malloc_r+0x86>
 800312e:	1a1b      	subs	r3, r3, r0
 8003130:	50a3      	str	r3, [r4, r2]
 8003132:	e7dc      	b.n	80030ee <_malloc_r+0x86>
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	e7ef      	b.n	8003118 <_malloc_r+0xb0>
 8003138:	0023      	movs	r3, r4
 800313a:	6864      	ldr	r4, [r4, #4]
 800313c:	e7a6      	b.n	800308c <_malloc_r+0x24>
 800313e:	9c00      	ldr	r4, [sp, #0]
 8003140:	6863      	ldr	r3, [r4, #4]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	e7ad      	b.n	80030a2 <_malloc_r+0x3a>
 8003146:	001a      	movs	r2, r3
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	42a3      	cmp	r3, r4
 800314c:	d1fb      	bne.n	8003146 <_malloc_r+0xde>
 800314e:	2300      	movs	r3, #0
 8003150:	e7da      	b.n	8003108 <_malloc_r+0xa0>
 8003152:	230c      	movs	r3, #12
 8003154:	0028      	movs	r0, r5
 8003156:	602b      	str	r3, [r5, #0]
 8003158:	f000 fa3c 	bl	80035d4 <__malloc_unlock>
 800315c:	e7c6      	b.n	80030ec <_malloc_r+0x84>
 800315e:	6007      	str	r7, [r0, #0]
 8003160:	e7da      	b.n	8003118 <_malloc_r+0xb0>
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	20000288 	.word	0x20000288

08003168 <_printf_common>:
 8003168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800316a:	0016      	movs	r6, r2
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	688a      	ldr	r2, [r1, #8]
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	000c      	movs	r4, r1
 8003174:	9000      	str	r0, [sp, #0]
 8003176:	4293      	cmp	r3, r2
 8003178:	da00      	bge.n	800317c <_printf_common+0x14>
 800317a:	0013      	movs	r3, r2
 800317c:	0022      	movs	r2, r4
 800317e:	6033      	str	r3, [r6, #0]
 8003180:	3243      	adds	r2, #67	@ 0x43
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	2a00      	cmp	r2, #0
 8003186:	d001      	beq.n	800318c <_printf_common+0x24>
 8003188:	3301      	adds	r3, #1
 800318a:	6033      	str	r3, [r6, #0]
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	069b      	lsls	r3, r3, #26
 8003190:	d502      	bpl.n	8003198 <_printf_common+0x30>
 8003192:	6833      	ldr	r3, [r6, #0]
 8003194:	3302      	adds	r3, #2
 8003196:	6033      	str	r3, [r6, #0]
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	2306      	movs	r3, #6
 800319c:	0015      	movs	r5, r2
 800319e:	401d      	ands	r5, r3
 80031a0:	421a      	tst	r2, r3
 80031a2:	d027      	beq.n	80031f4 <_printf_common+0x8c>
 80031a4:	0023      	movs	r3, r4
 80031a6:	3343      	adds	r3, #67	@ 0x43
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	4193      	sbcs	r3, r2
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	0692      	lsls	r2, r2, #26
 80031b2:	d430      	bmi.n	8003216 <_printf_common+0xae>
 80031b4:	0022      	movs	r2, r4
 80031b6:	9901      	ldr	r1, [sp, #4]
 80031b8:	9800      	ldr	r0, [sp, #0]
 80031ba:	9d08      	ldr	r5, [sp, #32]
 80031bc:	3243      	adds	r2, #67	@ 0x43
 80031be:	47a8      	blx	r5
 80031c0:	3001      	adds	r0, #1
 80031c2:	d025      	beq.n	8003210 <_printf_common+0xa8>
 80031c4:	2206      	movs	r2, #6
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	2500      	movs	r5, #0
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d105      	bne.n	80031dc <_printf_common+0x74>
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	68e5      	ldr	r5, [r4, #12]
 80031d4:	1aed      	subs	r5, r5, r3
 80031d6:	43eb      	mvns	r3, r5
 80031d8:	17db      	asrs	r3, r3, #31
 80031da:	401d      	ands	r5, r3
 80031dc:	68a3      	ldr	r3, [r4, #8]
 80031de:	6922      	ldr	r2, [r4, #16]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	dd01      	ble.n	80031e8 <_printf_common+0x80>
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	18ed      	adds	r5, r5, r3
 80031e8:	2600      	movs	r6, #0
 80031ea:	42b5      	cmp	r5, r6
 80031ec:	d120      	bne.n	8003230 <_printf_common+0xc8>
 80031ee:	2000      	movs	r0, #0
 80031f0:	e010      	b.n	8003214 <_printf_common+0xac>
 80031f2:	3501      	adds	r5, #1
 80031f4:	68e3      	ldr	r3, [r4, #12]
 80031f6:	6832      	ldr	r2, [r6, #0]
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	42ab      	cmp	r3, r5
 80031fc:	ddd2      	ble.n	80031a4 <_printf_common+0x3c>
 80031fe:	0022      	movs	r2, r4
 8003200:	2301      	movs	r3, #1
 8003202:	9901      	ldr	r1, [sp, #4]
 8003204:	9800      	ldr	r0, [sp, #0]
 8003206:	9f08      	ldr	r7, [sp, #32]
 8003208:	3219      	adds	r2, #25
 800320a:	47b8      	blx	r7
 800320c:	3001      	adds	r0, #1
 800320e:	d1f0      	bne.n	80031f2 <_printf_common+0x8a>
 8003210:	2001      	movs	r0, #1
 8003212:	4240      	negs	r0, r0
 8003214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003216:	2030      	movs	r0, #48	@ 0x30
 8003218:	18e1      	adds	r1, r4, r3
 800321a:	3143      	adds	r1, #67	@ 0x43
 800321c:	7008      	strb	r0, [r1, #0]
 800321e:	0021      	movs	r1, r4
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	3145      	adds	r1, #69	@ 0x45
 8003224:	7809      	ldrb	r1, [r1, #0]
 8003226:	18a2      	adds	r2, r4, r2
 8003228:	3243      	adds	r2, #67	@ 0x43
 800322a:	3302      	adds	r3, #2
 800322c:	7011      	strb	r1, [r2, #0]
 800322e:	e7c1      	b.n	80031b4 <_printf_common+0x4c>
 8003230:	0022      	movs	r2, r4
 8003232:	2301      	movs	r3, #1
 8003234:	9901      	ldr	r1, [sp, #4]
 8003236:	9800      	ldr	r0, [sp, #0]
 8003238:	9f08      	ldr	r7, [sp, #32]
 800323a:	321a      	adds	r2, #26
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	d0e6      	beq.n	8003210 <_printf_common+0xa8>
 8003242:	3601      	adds	r6, #1
 8003244:	e7d1      	b.n	80031ea <_printf_common+0x82>
	...

08003248 <_printf_i>:
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b08b      	sub	sp, #44	@ 0x2c
 800324c:	9206      	str	r2, [sp, #24]
 800324e:	000a      	movs	r2, r1
 8003250:	3243      	adds	r2, #67	@ 0x43
 8003252:	9307      	str	r3, [sp, #28]
 8003254:	9005      	str	r0, [sp, #20]
 8003256:	9203      	str	r2, [sp, #12]
 8003258:	7e0a      	ldrb	r2, [r1, #24]
 800325a:	000c      	movs	r4, r1
 800325c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800325e:	2a78      	cmp	r2, #120	@ 0x78
 8003260:	d809      	bhi.n	8003276 <_printf_i+0x2e>
 8003262:	2a62      	cmp	r2, #98	@ 0x62
 8003264:	d80b      	bhi.n	800327e <_printf_i+0x36>
 8003266:	2a00      	cmp	r2, #0
 8003268:	d100      	bne.n	800326c <_printf_i+0x24>
 800326a:	e0ba      	b.n	80033e2 <_printf_i+0x19a>
 800326c:	497a      	ldr	r1, [pc, #488]	@ (8003458 <_printf_i+0x210>)
 800326e:	9104      	str	r1, [sp, #16]
 8003270:	2a58      	cmp	r2, #88	@ 0x58
 8003272:	d100      	bne.n	8003276 <_printf_i+0x2e>
 8003274:	e08e      	b.n	8003394 <_printf_i+0x14c>
 8003276:	0025      	movs	r5, r4
 8003278:	3542      	adds	r5, #66	@ 0x42
 800327a:	702a      	strb	r2, [r5, #0]
 800327c:	e022      	b.n	80032c4 <_printf_i+0x7c>
 800327e:	0010      	movs	r0, r2
 8003280:	3863      	subs	r0, #99	@ 0x63
 8003282:	2815      	cmp	r0, #21
 8003284:	d8f7      	bhi.n	8003276 <_printf_i+0x2e>
 8003286:	f7fc ff23 	bl	80000d0 <__gnu_thumb1_case_shi>
 800328a:	0016      	.short	0x0016
 800328c:	fff6001f 	.word	0xfff6001f
 8003290:	fff6fff6 	.word	0xfff6fff6
 8003294:	001ffff6 	.word	0x001ffff6
 8003298:	fff6fff6 	.word	0xfff6fff6
 800329c:	fff6fff6 	.word	0xfff6fff6
 80032a0:	0036009f 	.word	0x0036009f
 80032a4:	fff6007e 	.word	0xfff6007e
 80032a8:	00b0fff6 	.word	0x00b0fff6
 80032ac:	0036fff6 	.word	0x0036fff6
 80032b0:	fff6fff6 	.word	0xfff6fff6
 80032b4:	0082      	.short	0x0082
 80032b6:	0025      	movs	r5, r4
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	3542      	adds	r5, #66	@ 0x42
 80032bc:	1d11      	adds	r1, r2, #4
 80032be:	6019      	str	r1, [r3, #0]
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	702b      	strb	r3, [r5, #0]
 80032c4:	2301      	movs	r3, #1
 80032c6:	e09e      	b.n	8003406 <_printf_i+0x1be>
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	6809      	ldr	r1, [r1, #0]
 80032cc:	1d02      	adds	r2, r0, #4
 80032ce:	060d      	lsls	r5, r1, #24
 80032d0:	d50b      	bpl.n	80032ea <_printf_i+0xa2>
 80032d2:	6806      	ldr	r6, [r0, #0]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	da03      	bge.n	80032e2 <_printf_i+0x9a>
 80032da:	232d      	movs	r3, #45	@ 0x2d
 80032dc:	9a03      	ldr	r2, [sp, #12]
 80032de:	4276      	negs	r6, r6
 80032e0:	7013      	strb	r3, [r2, #0]
 80032e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003458 <_printf_i+0x210>)
 80032e4:	270a      	movs	r7, #10
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	e018      	b.n	800331c <_printf_i+0xd4>
 80032ea:	6806      	ldr	r6, [r0, #0]
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	0649      	lsls	r1, r1, #25
 80032f0:	d5f1      	bpl.n	80032d6 <_printf_i+0x8e>
 80032f2:	b236      	sxth	r6, r6
 80032f4:	e7ef      	b.n	80032d6 <_printf_i+0x8e>
 80032f6:	6808      	ldr	r0, [r1, #0]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	c940      	ldmia	r1!, {r6}
 80032fc:	0605      	lsls	r5, r0, #24
 80032fe:	d402      	bmi.n	8003306 <_printf_i+0xbe>
 8003300:	0640      	lsls	r0, r0, #25
 8003302:	d500      	bpl.n	8003306 <_printf_i+0xbe>
 8003304:	b2b6      	uxth	r6, r6
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <_printf_i+0x210>)
 800330a:	270a      	movs	r7, #10
 800330c:	9304      	str	r3, [sp, #16]
 800330e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003310:	d100      	bne.n	8003314 <_printf_i+0xcc>
 8003312:	3f02      	subs	r7, #2
 8003314:	0023      	movs	r3, r4
 8003316:	2200      	movs	r2, #0
 8003318:	3343      	adds	r3, #67	@ 0x43
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	60a3      	str	r3, [r4, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	db06      	blt.n	8003332 <_printf_i+0xea>
 8003324:	2104      	movs	r1, #4
 8003326:	6822      	ldr	r2, [r4, #0]
 8003328:	9d03      	ldr	r5, [sp, #12]
 800332a:	438a      	bics	r2, r1
 800332c:	6022      	str	r2, [r4, #0]
 800332e:	4333      	orrs	r3, r6
 8003330:	d00c      	beq.n	800334c <_printf_i+0x104>
 8003332:	9d03      	ldr	r5, [sp, #12]
 8003334:	0030      	movs	r0, r6
 8003336:	0039      	movs	r1, r7
 8003338:	f7fc ff5a 	bl	80001f0 <__aeabi_uidivmod>
 800333c:	9b04      	ldr	r3, [sp, #16]
 800333e:	3d01      	subs	r5, #1
 8003340:	5c5b      	ldrb	r3, [r3, r1]
 8003342:	702b      	strb	r3, [r5, #0]
 8003344:	0033      	movs	r3, r6
 8003346:	0006      	movs	r6, r0
 8003348:	429f      	cmp	r7, r3
 800334a:	d9f3      	bls.n	8003334 <_printf_i+0xec>
 800334c:	2f08      	cmp	r7, #8
 800334e:	d109      	bne.n	8003364 <_printf_i+0x11c>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	07db      	lsls	r3, r3, #31
 8003354:	d506      	bpl.n	8003364 <_printf_i+0x11c>
 8003356:	6862      	ldr	r2, [r4, #4]
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	429a      	cmp	r2, r3
 800335c:	dc02      	bgt.n	8003364 <_printf_i+0x11c>
 800335e:	2330      	movs	r3, #48	@ 0x30
 8003360:	3d01      	subs	r5, #1
 8003362:	702b      	strb	r3, [r5, #0]
 8003364:	9b03      	ldr	r3, [sp, #12]
 8003366:	1b5b      	subs	r3, r3, r5
 8003368:	6123      	str	r3, [r4, #16]
 800336a:	9b07      	ldr	r3, [sp, #28]
 800336c:	0021      	movs	r1, r4
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	9805      	ldr	r0, [sp, #20]
 8003372:	9b06      	ldr	r3, [sp, #24]
 8003374:	aa09      	add	r2, sp, #36	@ 0x24
 8003376:	f7ff fef7 	bl	8003168 <_printf_common>
 800337a:	3001      	adds	r0, #1
 800337c:	d148      	bne.n	8003410 <_printf_i+0x1c8>
 800337e:	2001      	movs	r0, #1
 8003380:	4240      	negs	r0, r0
 8003382:	b00b      	add	sp, #44	@ 0x2c
 8003384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003386:	2220      	movs	r2, #32
 8003388:	6809      	ldr	r1, [r1, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	6022      	str	r2, [r4, #0]
 800338e:	2278      	movs	r2, #120	@ 0x78
 8003390:	4932      	ldr	r1, [pc, #200]	@ (800345c <_printf_i+0x214>)
 8003392:	9104      	str	r1, [sp, #16]
 8003394:	0021      	movs	r1, r4
 8003396:	3145      	adds	r1, #69	@ 0x45
 8003398:	700a      	strb	r2, [r1, #0]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	c940      	ldmia	r1!, {r6}
 80033a0:	0610      	lsls	r0, r2, #24
 80033a2:	d402      	bmi.n	80033aa <_printf_i+0x162>
 80033a4:	0650      	lsls	r0, r2, #25
 80033a6:	d500      	bpl.n	80033aa <_printf_i+0x162>
 80033a8:	b2b6      	uxth	r6, r6
 80033aa:	6019      	str	r1, [r3, #0]
 80033ac:	07d3      	lsls	r3, r2, #31
 80033ae:	d502      	bpl.n	80033b6 <_printf_i+0x16e>
 80033b0:	2320      	movs	r3, #32
 80033b2:	4313      	orrs	r3, r2
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	d001      	beq.n	80033be <_printf_i+0x176>
 80033ba:	2710      	movs	r7, #16
 80033bc:	e7aa      	b.n	8003314 <_printf_i+0xcc>
 80033be:	2220      	movs	r2, #32
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	4393      	bics	r3, r2
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	e7f8      	b.n	80033ba <_printf_i+0x172>
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	680d      	ldr	r5, [r1, #0]
 80033cc:	1d10      	adds	r0, r2, #4
 80033ce:	6949      	ldr	r1, [r1, #20]
 80033d0:	6018      	str	r0, [r3, #0]
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	062e      	lsls	r6, r5, #24
 80033d6:	d501      	bpl.n	80033dc <_printf_i+0x194>
 80033d8:	6019      	str	r1, [r3, #0]
 80033da:	e002      	b.n	80033e2 <_printf_i+0x19a>
 80033dc:	066d      	lsls	r5, r5, #25
 80033de:	d5fb      	bpl.n	80033d8 <_printf_i+0x190>
 80033e0:	8019      	strh	r1, [r3, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9d03      	ldr	r5, [sp, #12]
 80033e6:	6123      	str	r3, [r4, #16]
 80033e8:	e7bf      	b.n	800336a <_printf_i+0x122>
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	1d11      	adds	r1, r2, #4
 80033ee:	6019      	str	r1, [r3, #0]
 80033f0:	6815      	ldr	r5, [r2, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	0028      	movs	r0, r5
 80033f6:	6862      	ldr	r2, [r4, #4]
 80033f8:	f000 f9f2 	bl	80037e0 <memchr>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d001      	beq.n	8003404 <_printf_i+0x1bc>
 8003400:	1b40      	subs	r0, r0, r5
 8003402:	6060      	str	r0, [r4, #4]
 8003404:	6863      	ldr	r3, [r4, #4]
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	2300      	movs	r3, #0
 800340a:	9a03      	ldr	r2, [sp, #12]
 800340c:	7013      	strb	r3, [r2, #0]
 800340e:	e7ac      	b.n	800336a <_printf_i+0x122>
 8003410:	002a      	movs	r2, r5
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	9906      	ldr	r1, [sp, #24]
 8003416:	9805      	ldr	r0, [sp, #20]
 8003418:	9d07      	ldr	r5, [sp, #28]
 800341a:	47a8      	blx	r5
 800341c:	3001      	adds	r0, #1
 800341e:	d0ae      	beq.n	800337e <_printf_i+0x136>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	079b      	lsls	r3, r3, #30
 8003424:	d415      	bmi.n	8003452 <_printf_i+0x20a>
 8003426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003428:	68e0      	ldr	r0, [r4, #12]
 800342a:	4298      	cmp	r0, r3
 800342c:	daa9      	bge.n	8003382 <_printf_i+0x13a>
 800342e:	0018      	movs	r0, r3
 8003430:	e7a7      	b.n	8003382 <_printf_i+0x13a>
 8003432:	0022      	movs	r2, r4
 8003434:	2301      	movs	r3, #1
 8003436:	9906      	ldr	r1, [sp, #24]
 8003438:	9805      	ldr	r0, [sp, #20]
 800343a:	9e07      	ldr	r6, [sp, #28]
 800343c:	3219      	adds	r2, #25
 800343e:	47b0      	blx	r6
 8003440:	3001      	adds	r0, #1
 8003442:	d09c      	beq.n	800337e <_printf_i+0x136>
 8003444:	3501      	adds	r5, #1
 8003446:	68e3      	ldr	r3, [r4, #12]
 8003448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	42ab      	cmp	r3, r5
 800344e:	dcf0      	bgt.n	8003432 <_printf_i+0x1ea>
 8003450:	e7e9      	b.n	8003426 <_printf_i+0x1de>
 8003452:	2500      	movs	r5, #0
 8003454:	e7f7      	b.n	8003446 <_printf_i+0x1fe>
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	08004074 	.word	0x08004074
 800345c:	08004085 	.word	0x08004085

08003460 <__sflush_r>:
 8003460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003462:	220c      	movs	r2, #12
 8003464:	5e8b      	ldrsh	r3, [r1, r2]
 8003466:	0005      	movs	r5, r0
 8003468:	000c      	movs	r4, r1
 800346a:	071a      	lsls	r2, r3, #28
 800346c:	d456      	bmi.n	800351c <__sflush_r+0xbc>
 800346e:	684a      	ldr	r2, [r1, #4]
 8003470:	2a00      	cmp	r2, #0
 8003472:	dc02      	bgt.n	800347a <__sflush_r+0x1a>
 8003474:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003476:	2a00      	cmp	r2, #0
 8003478:	dd4e      	ble.n	8003518 <__sflush_r+0xb8>
 800347a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800347c:	2f00      	cmp	r7, #0
 800347e:	d04b      	beq.n	8003518 <__sflush_r+0xb8>
 8003480:	2200      	movs	r2, #0
 8003482:	2080      	movs	r0, #128	@ 0x80
 8003484:	682e      	ldr	r6, [r5, #0]
 8003486:	602a      	str	r2, [r5, #0]
 8003488:	001a      	movs	r2, r3
 800348a:	0140      	lsls	r0, r0, #5
 800348c:	6a21      	ldr	r1, [r4, #32]
 800348e:	4002      	ands	r2, r0
 8003490:	4203      	tst	r3, r0
 8003492:	d033      	beq.n	80034fc <__sflush_r+0x9c>
 8003494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	075b      	lsls	r3, r3, #29
 800349a:	d506      	bpl.n	80034aa <__sflush_r+0x4a>
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <__sflush_r+0x4a>
 80034a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034a8:	1ad2      	subs	r2, r2, r3
 80034aa:	2300      	movs	r3, #0
 80034ac:	0028      	movs	r0, r5
 80034ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80034b0:	6a21      	ldr	r1, [r4, #32]
 80034b2:	47b8      	blx	r7
 80034b4:	89a2      	ldrh	r2, [r4, #12]
 80034b6:	1c43      	adds	r3, r0, #1
 80034b8:	d106      	bne.n	80034c8 <__sflush_r+0x68>
 80034ba:	6829      	ldr	r1, [r5, #0]
 80034bc:	291d      	cmp	r1, #29
 80034be:	d846      	bhi.n	800354e <__sflush_r+0xee>
 80034c0:	4b29      	ldr	r3, [pc, #164]	@ (8003568 <__sflush_r+0x108>)
 80034c2:	40cb      	lsrs	r3, r1
 80034c4:	07db      	lsls	r3, r3, #31
 80034c6:	d542      	bpl.n	800354e <__sflush_r+0xee>
 80034c8:	2300      	movs	r3, #0
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	04d2      	lsls	r2, r2, #19
 80034d2:	d505      	bpl.n	80034e0 <__sflush_r+0x80>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d102      	bne.n	80034de <__sflush_r+0x7e>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d100      	bne.n	80034e0 <__sflush_r+0x80>
 80034de:	6560      	str	r0, [r4, #84]	@ 0x54
 80034e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034e2:	602e      	str	r6, [r5, #0]
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d017      	beq.n	8003518 <__sflush_r+0xb8>
 80034e8:	0023      	movs	r3, r4
 80034ea:	3344      	adds	r3, #68	@ 0x44
 80034ec:	4299      	cmp	r1, r3
 80034ee:	d002      	beq.n	80034f6 <__sflush_r+0x96>
 80034f0:	0028      	movs	r0, r5
 80034f2:	f000 f991 	bl	8003818 <_free_r>
 80034f6:	2300      	movs	r3, #0
 80034f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80034fa:	e00d      	b.n	8003518 <__sflush_r+0xb8>
 80034fc:	2301      	movs	r3, #1
 80034fe:	0028      	movs	r0, r5
 8003500:	47b8      	blx	r7
 8003502:	0002      	movs	r2, r0
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d1c6      	bne.n	8003496 <__sflush_r+0x36>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0c3      	beq.n	8003496 <__sflush_r+0x36>
 800350e:	2b1d      	cmp	r3, #29
 8003510:	d001      	beq.n	8003516 <__sflush_r+0xb6>
 8003512:	2b16      	cmp	r3, #22
 8003514:	d11a      	bne.n	800354c <__sflush_r+0xec>
 8003516:	602e      	str	r6, [r5, #0]
 8003518:	2000      	movs	r0, #0
 800351a:	e01e      	b.n	800355a <__sflush_r+0xfa>
 800351c:	690e      	ldr	r6, [r1, #16]
 800351e:	2e00      	cmp	r6, #0
 8003520:	d0fa      	beq.n	8003518 <__sflush_r+0xb8>
 8003522:	680f      	ldr	r7, [r1, #0]
 8003524:	600e      	str	r6, [r1, #0]
 8003526:	1bba      	subs	r2, r7, r6
 8003528:	9201      	str	r2, [sp, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	079b      	lsls	r3, r3, #30
 800352e:	d100      	bne.n	8003532 <__sflush_r+0xd2>
 8003530:	694a      	ldr	r2, [r1, #20]
 8003532:	60a2      	str	r2, [r4, #8]
 8003534:	9b01      	ldr	r3, [sp, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	ddee      	ble.n	8003518 <__sflush_r+0xb8>
 800353a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800353c:	0032      	movs	r2, r6
 800353e:	001f      	movs	r7, r3
 8003540:	0028      	movs	r0, r5
 8003542:	9b01      	ldr	r3, [sp, #4]
 8003544:	6a21      	ldr	r1, [r4, #32]
 8003546:	47b8      	blx	r7
 8003548:	2800      	cmp	r0, #0
 800354a:	dc07      	bgt.n	800355c <__sflush_r+0xfc>
 800354c:	89a2      	ldrh	r2, [r4, #12]
 800354e:	2340      	movs	r3, #64	@ 0x40
 8003550:	2001      	movs	r0, #1
 8003552:	4313      	orrs	r3, r2
 8003554:	b21b      	sxth	r3, r3
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	4240      	negs	r0, r0
 800355a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	1836      	adds	r6, r6, r0
 8003560:	1a1b      	subs	r3, r3, r0
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	e7e6      	b.n	8003534 <__sflush_r+0xd4>
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	20400001 	.word	0x20400001

0800356c <_fflush_r>:
 800356c:	690b      	ldr	r3, [r1, #16]
 800356e:	b570      	push	{r4, r5, r6, lr}
 8003570:	0005      	movs	r5, r0
 8003572:	000c      	movs	r4, r1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <_fflush_r+0x12>
 8003578:	2500      	movs	r5, #0
 800357a:	0028      	movs	r0, r5
 800357c:	bd70      	pop	{r4, r5, r6, pc}
 800357e:	2800      	cmp	r0, #0
 8003580:	d004      	beq.n	800358c <_fflush_r+0x20>
 8003582:	6a03      	ldr	r3, [r0, #32]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <_fflush_r+0x20>
 8003588:	f7ff fb62 	bl	8002c50 <__sinit>
 800358c:	220c      	movs	r2, #12
 800358e:	5ea3      	ldrsh	r3, [r4, r2]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f1      	beq.n	8003578 <_fflush_r+0xc>
 8003594:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003596:	07d2      	lsls	r2, r2, #31
 8003598:	d404      	bmi.n	80035a4 <_fflush_r+0x38>
 800359a:	059b      	lsls	r3, r3, #22
 800359c:	d402      	bmi.n	80035a4 <_fflush_r+0x38>
 800359e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035a0:	f7ff fbb7 	bl	8002d12 <__retarget_lock_acquire_recursive>
 80035a4:	0028      	movs	r0, r5
 80035a6:	0021      	movs	r1, r4
 80035a8:	f7ff ff5a 	bl	8003460 <__sflush_r>
 80035ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035ae:	0005      	movs	r5, r0
 80035b0:	07db      	lsls	r3, r3, #31
 80035b2:	d4e2      	bmi.n	800357a <_fflush_r+0xe>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	059b      	lsls	r3, r3, #22
 80035b8:	d4df      	bmi.n	800357a <_fflush_r+0xe>
 80035ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035bc:	f7ff fbaa 	bl	8002d14 <__retarget_lock_release_recursive>
 80035c0:	e7db      	b.n	800357a <_fflush_r+0xe>
	...

080035c4 <__malloc_lock>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	4802      	ldr	r0, [pc, #8]	@ (80035d0 <__malloc_lock+0xc>)
 80035c8:	f7ff fba3 	bl	8002d12 <__retarget_lock_acquire_recursive>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	20000280 	.word	0x20000280

080035d4 <__malloc_unlock>:
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <__malloc_unlock+0xc>)
 80035d8:	f7ff fb9c 	bl	8002d14 <__retarget_lock_release_recursive>
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000280 	.word	0x20000280

080035e4 <__sread>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	000c      	movs	r4, r1
 80035e8:	250e      	movs	r5, #14
 80035ea:	5f49      	ldrsh	r1, [r1, r5]
 80035ec:	f000 f8ac 	bl	8003748 <_read_r>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	db03      	blt.n	80035fc <__sread+0x18>
 80035f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035f6:	181b      	adds	r3, r3, r0
 80035f8:	6563      	str	r3, [r4, #84]	@ 0x54
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	4a02      	ldr	r2, [pc, #8]	@ (8003608 <__sread+0x24>)
 8003600:	4013      	ands	r3, r2
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	e7f9      	b.n	80035fa <__sread+0x16>
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	ffffefff 	.word	0xffffefff

0800360c <__swrite>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	001f      	movs	r7, r3
 8003610:	898b      	ldrh	r3, [r1, #12]
 8003612:	0005      	movs	r5, r0
 8003614:	000c      	movs	r4, r1
 8003616:	0016      	movs	r6, r2
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	d505      	bpl.n	8003628 <__swrite+0x1c>
 800361c:	230e      	movs	r3, #14
 800361e:	5ec9      	ldrsh	r1, [r1, r3]
 8003620:	2200      	movs	r2, #0
 8003622:	2302      	movs	r3, #2
 8003624:	f000 f87c 	bl	8003720 <_lseek_r>
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <__swrite+0x34>)
 800362c:	0028      	movs	r0, r5
 800362e:	4013      	ands	r3, r2
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	0032      	movs	r2, r6
 8003634:	230e      	movs	r3, #14
 8003636:	5ee1      	ldrsh	r1, [r4, r3]
 8003638:	003b      	movs	r3, r7
 800363a:	f000 f8ab 	bl	8003794 <_write_r>
 800363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003640:	ffffefff 	.word	0xffffefff

08003644 <__sseek>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	000c      	movs	r4, r1
 8003648:	250e      	movs	r5, #14
 800364a:	5f49      	ldrsh	r1, [r1, r5]
 800364c:	f000 f868 	bl	8003720 <_lseek_r>
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	1c42      	adds	r2, r0, #1
 8003654:	d103      	bne.n	800365e <__sseek+0x1a>
 8003656:	4a05      	ldr	r2, [pc, #20]	@ (800366c <__sseek+0x28>)
 8003658:	4013      	ands	r3, r2
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	2280      	movs	r2, #128	@ 0x80
 8003660:	0152      	lsls	r2, r2, #5
 8003662:	4313      	orrs	r3, r2
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	6560      	str	r0, [r4, #84]	@ 0x54
 8003668:	e7f8      	b.n	800365c <__sseek+0x18>
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	ffffefff 	.word	0xffffefff

08003670 <__sclose>:
 8003670:	b510      	push	{r4, lr}
 8003672:	230e      	movs	r3, #14
 8003674:	5ec9      	ldrsh	r1, [r1, r3]
 8003676:	f000 f8a1 	bl	80037bc <_close_r>
 800367a:	bd10      	pop	{r4, pc}

0800367c <fiprintf>:
 800367c:	b40e      	push	{r1, r2, r3}
 800367e:	b517      	push	{r0, r1, r2, r4, lr}
 8003680:	4c05      	ldr	r4, [pc, #20]	@ (8003698 <fiprintf+0x1c>)
 8003682:	ab05      	add	r3, sp, #20
 8003684:	cb04      	ldmia	r3!, {r2}
 8003686:	0001      	movs	r1, r0
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	f000 f936 	bl	80038fc <_vfiprintf_r>
 8003690:	bc1e      	pop	{r1, r2, r3, r4}
 8003692:	bc08      	pop	{r3}
 8003694:	b003      	add	sp, #12
 8003696:	4718      	bx	r3
 8003698:	20000018 	.word	0x20000018

0800369c <_realloc_r>:
 800369c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800369e:	0006      	movs	r6, r0
 80036a0:	000c      	movs	r4, r1
 80036a2:	0015      	movs	r5, r2
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d105      	bne.n	80036b4 <_realloc_r+0x18>
 80036a8:	0011      	movs	r1, r2
 80036aa:	f7ff fcdd 	bl	8003068 <_malloc_r>
 80036ae:	0004      	movs	r4, r0
 80036b0:	0020      	movs	r0, r4
 80036b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d103      	bne.n	80036c0 <_realloc_r+0x24>
 80036b8:	f000 f8ae 	bl	8003818 <_free_r>
 80036bc:	002c      	movs	r4, r5
 80036be:	e7f7      	b.n	80036b0 <_realloc_r+0x14>
 80036c0:	f000 fa38 	bl	8003b34 <_malloc_usable_size_r>
 80036c4:	0007      	movs	r7, r0
 80036c6:	4285      	cmp	r5, r0
 80036c8:	d802      	bhi.n	80036d0 <_realloc_r+0x34>
 80036ca:	0843      	lsrs	r3, r0, #1
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	d3ef      	bcc.n	80036b0 <_realloc_r+0x14>
 80036d0:	0029      	movs	r1, r5
 80036d2:	0030      	movs	r0, r6
 80036d4:	f7ff fcc8 	bl	8003068 <_malloc_r>
 80036d8:	9001      	str	r0, [sp, #4]
 80036da:	2800      	cmp	r0, #0
 80036dc:	d101      	bne.n	80036e2 <_realloc_r+0x46>
 80036de:	9c01      	ldr	r4, [sp, #4]
 80036e0:	e7e6      	b.n	80036b0 <_realloc_r+0x14>
 80036e2:	002a      	movs	r2, r5
 80036e4:	42bd      	cmp	r5, r7
 80036e6:	d900      	bls.n	80036ea <_realloc_r+0x4e>
 80036e8:	003a      	movs	r2, r7
 80036ea:	0021      	movs	r1, r4
 80036ec:	9801      	ldr	r0, [sp, #4]
 80036ee:	f000 f882 	bl	80037f6 <memcpy>
 80036f2:	0021      	movs	r1, r4
 80036f4:	0030      	movs	r0, r6
 80036f6:	f000 f88f 	bl	8003818 <_free_r>
 80036fa:	e7f0      	b.n	80036de <_realloc_r+0x42>

080036fc <memmove>:
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4288      	cmp	r0, r1
 8003700:	d902      	bls.n	8003708 <memmove+0xc>
 8003702:	188b      	adds	r3, r1, r2
 8003704:	4298      	cmp	r0, r3
 8003706:	d308      	bcc.n	800371a <memmove+0x1e>
 8003708:	2300      	movs	r3, #0
 800370a:	429a      	cmp	r2, r3
 800370c:	d007      	beq.n	800371e <memmove+0x22>
 800370e:	5ccc      	ldrb	r4, [r1, r3]
 8003710:	54c4      	strb	r4, [r0, r3]
 8003712:	3301      	adds	r3, #1
 8003714:	e7f9      	b.n	800370a <memmove+0xe>
 8003716:	5c8b      	ldrb	r3, [r1, r2]
 8003718:	5483      	strb	r3, [r0, r2]
 800371a:	3a01      	subs	r2, #1
 800371c:	d2fb      	bcs.n	8003716 <memmove+0x1a>
 800371e:	bd10      	pop	{r4, pc}

08003720 <_lseek_r>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	0004      	movs	r4, r0
 8003724:	0008      	movs	r0, r1
 8003726:	0011      	movs	r1, r2
 8003728:	001a      	movs	r2, r3
 800372a:	2300      	movs	r3, #0
 800372c:	4d05      	ldr	r5, [pc, #20]	@ (8003744 <_lseek_r+0x24>)
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	f000 fba8 	bl	8003e84 <_lseek>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d103      	bne.n	8003740 <_lseek_r+0x20>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d000      	beq.n	8003740 <_lseek_r+0x20>
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	2000028c 	.word	0x2000028c

08003748 <_read_r>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	0004      	movs	r4, r0
 800374c:	0008      	movs	r0, r1
 800374e:	0011      	movs	r1, r2
 8003750:	001a      	movs	r2, r3
 8003752:	2300      	movs	r3, #0
 8003754:	4d05      	ldr	r5, [pc, #20]	@ (800376c <_read_r+0x24>)
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	f000 fb9c 	bl	8003e94 <_read>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d103      	bne.n	8003768 <_read_r+0x20>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d000      	beq.n	8003768 <_read_r+0x20>
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	bd70      	pop	{r4, r5, r6, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	2000028c 	.word	0x2000028c

08003770 <_sbrk_r>:
 8003770:	2300      	movs	r3, #0
 8003772:	b570      	push	{r4, r5, r6, lr}
 8003774:	4d06      	ldr	r5, [pc, #24]	@ (8003790 <_sbrk_r+0x20>)
 8003776:	0004      	movs	r4, r0
 8003778:	0008      	movs	r0, r1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	f000 fb92 	bl	8003ea4 <_sbrk>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	d103      	bne.n	800378c <_sbrk_r+0x1c>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d000      	beq.n	800378c <_sbrk_r+0x1c>
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	bd70      	pop	{r4, r5, r6, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	2000028c 	.word	0x2000028c

08003794 <_write_r>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	0004      	movs	r4, r0
 8003798:	0008      	movs	r0, r1
 800379a:	0011      	movs	r1, r2
 800379c:	001a      	movs	r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	4d05      	ldr	r5, [pc, #20]	@ (80037b8 <_write_r+0x24>)
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f000 fb8e 	bl	8003ec4 <_write>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d103      	bne.n	80037b4 <_write_r+0x20>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d000      	beq.n	80037b4 <_write_r+0x20>
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	2000028c 	.word	0x2000028c

080037bc <_close_r>:
 80037bc:	2300      	movs	r3, #0
 80037be:	b570      	push	{r4, r5, r6, lr}
 80037c0:	4d06      	ldr	r5, [pc, #24]	@ (80037dc <_close_r+0x20>)
 80037c2:	0004      	movs	r4, r0
 80037c4:	0008      	movs	r0, r1
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	f000 fb34 	bl	8003e34 <_close>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d103      	bne.n	80037d8 <_close_r+0x1c>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d000      	beq.n	80037d8 <_close_r+0x1c>
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	2000028c 	.word	0x2000028c

080037e0 <memchr>:
 80037e0:	b2c9      	uxtb	r1, r1
 80037e2:	1882      	adds	r2, r0, r2
 80037e4:	4290      	cmp	r0, r2
 80037e6:	d101      	bne.n	80037ec <memchr+0xc>
 80037e8:	2000      	movs	r0, #0
 80037ea:	4770      	bx	lr
 80037ec:	7803      	ldrb	r3, [r0, #0]
 80037ee:	428b      	cmp	r3, r1
 80037f0:	d0fb      	beq.n	80037ea <memchr+0xa>
 80037f2:	3001      	adds	r0, #1
 80037f4:	e7f6      	b.n	80037e4 <memchr+0x4>

080037f6 <memcpy>:
 80037f6:	2300      	movs	r3, #0
 80037f8:	b510      	push	{r4, lr}
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d100      	bne.n	8003800 <memcpy+0xa>
 80037fe:	bd10      	pop	{r4, pc}
 8003800:	5ccc      	ldrb	r4, [r1, r3]
 8003802:	54c4      	strb	r4, [r0, r3]
 8003804:	3301      	adds	r3, #1
 8003806:	e7f8      	b.n	80037fa <memcpy+0x4>

08003808 <abort>:
 8003808:	2006      	movs	r0, #6
 800380a:	b510      	push	{r4, lr}
 800380c:	f000 face 	bl	8003dac <raise>
 8003810:	2001      	movs	r0, #1
 8003812:	f000 fb5f 	bl	8003ed4 <_exit>
	...

08003818 <_free_r>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	0005      	movs	r5, r0
 800381c:	1e0c      	subs	r4, r1, #0
 800381e:	d010      	beq.n	8003842 <_free_r+0x2a>
 8003820:	3c04      	subs	r4, #4
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da00      	bge.n	800382a <_free_r+0x12>
 8003828:	18e4      	adds	r4, r4, r3
 800382a:	0028      	movs	r0, r5
 800382c:	f7ff feca 	bl	80035c4 <__malloc_lock>
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <_free_r+0x90>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <_free_r+0x2c>
 8003838:	6063      	str	r3, [r4, #4]
 800383a:	6014      	str	r4, [r2, #0]
 800383c:	0028      	movs	r0, r5
 800383e:	f7ff fec9 	bl	80035d4 <__malloc_unlock>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	42a3      	cmp	r3, r4
 8003846:	d908      	bls.n	800385a <_free_r+0x42>
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	1821      	adds	r1, r4, r0
 800384c:	428b      	cmp	r3, r1
 800384e:	d1f3      	bne.n	8003838 <_free_r+0x20>
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	1809      	adds	r1, r1, r0
 8003856:	6021      	str	r1, [r4, #0]
 8003858:	e7ee      	b.n	8003838 <_free_r+0x20>
 800385a:	001a      	movs	r2, r3
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <_free_r+0x4e>
 8003862:	42a3      	cmp	r3, r4
 8003864:	d9f9      	bls.n	800385a <_free_r+0x42>
 8003866:	6811      	ldr	r1, [r2, #0]
 8003868:	1850      	adds	r0, r2, r1
 800386a:	42a0      	cmp	r0, r4
 800386c:	d10b      	bne.n	8003886 <_free_r+0x6e>
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	1809      	adds	r1, r1, r0
 8003872:	1850      	adds	r0, r2, r1
 8003874:	6011      	str	r1, [r2, #0]
 8003876:	4283      	cmp	r3, r0
 8003878:	d1e0      	bne.n	800383c <_free_r+0x24>
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	1841      	adds	r1, r0, r1
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	6053      	str	r3, [r2, #4]
 8003884:	e7da      	b.n	800383c <_free_r+0x24>
 8003886:	42a0      	cmp	r0, r4
 8003888:	d902      	bls.n	8003890 <_free_r+0x78>
 800388a:	230c      	movs	r3, #12
 800388c:	602b      	str	r3, [r5, #0]
 800388e:	e7d5      	b.n	800383c <_free_r+0x24>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	1821      	adds	r1, r4, r0
 8003894:	428b      	cmp	r3, r1
 8003896:	d103      	bne.n	80038a0 <_free_r+0x88>
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	1809      	adds	r1, r1, r0
 800389e:	6021      	str	r1, [r4, #0]
 80038a0:	6063      	str	r3, [r4, #4]
 80038a2:	6054      	str	r4, [r2, #4]
 80038a4:	e7ca      	b.n	800383c <_free_r+0x24>
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	20000288 	.word	0x20000288

080038ac <__sfputc_r>:
 80038ac:	6893      	ldr	r3, [r2, #8]
 80038ae:	b510      	push	{r4, lr}
 80038b0:	3b01      	subs	r3, #1
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da04      	bge.n	80038c2 <__sfputc_r+0x16>
 80038b8:	6994      	ldr	r4, [r2, #24]
 80038ba:	42a3      	cmp	r3, r4
 80038bc:	db07      	blt.n	80038ce <__sfputc_r+0x22>
 80038be:	290a      	cmp	r1, #10
 80038c0:	d005      	beq.n	80038ce <__sfputc_r+0x22>
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	1c58      	adds	r0, r3, #1
 80038c6:	6010      	str	r0, [r2, #0]
 80038c8:	7019      	strb	r1, [r3, #0]
 80038ca:	0008      	movs	r0, r1
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	f000 f939 	bl	8003b44 <__swbuf_r>
 80038d2:	0001      	movs	r1, r0
 80038d4:	e7f9      	b.n	80038ca <__sfputc_r+0x1e>

080038d6 <__sfputs_r>:
 80038d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d8:	0006      	movs	r6, r0
 80038da:	000f      	movs	r7, r1
 80038dc:	0014      	movs	r4, r2
 80038de:	18d5      	adds	r5, r2, r3
 80038e0:	42ac      	cmp	r4, r5
 80038e2:	d101      	bne.n	80038e8 <__sfputs_r+0x12>
 80038e4:	2000      	movs	r0, #0
 80038e6:	e007      	b.n	80038f8 <__sfputs_r+0x22>
 80038e8:	7821      	ldrb	r1, [r4, #0]
 80038ea:	003a      	movs	r2, r7
 80038ec:	0030      	movs	r0, r6
 80038ee:	f7ff ffdd 	bl	80038ac <__sfputc_r>
 80038f2:	3401      	adds	r4, #1
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d1f3      	bne.n	80038e0 <__sfputs_r+0xa>
 80038f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038fc <_vfiprintf_r>:
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b0a1      	sub	sp, #132	@ 0x84
 8003900:	000f      	movs	r7, r1
 8003902:	0015      	movs	r5, r2
 8003904:	001e      	movs	r6, r3
 8003906:	9003      	str	r0, [sp, #12]
 8003908:	2800      	cmp	r0, #0
 800390a:	d004      	beq.n	8003916 <_vfiprintf_r+0x1a>
 800390c:	6a03      	ldr	r3, [r0, #32]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <_vfiprintf_r+0x1a>
 8003912:	f7ff f99d 	bl	8002c50 <__sinit>
 8003916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003918:	07db      	lsls	r3, r3, #31
 800391a:	d405      	bmi.n	8003928 <_vfiprintf_r+0x2c>
 800391c:	89bb      	ldrh	r3, [r7, #12]
 800391e:	059b      	lsls	r3, r3, #22
 8003920:	d402      	bmi.n	8003928 <_vfiprintf_r+0x2c>
 8003922:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003924:	f7ff f9f5 	bl	8002d12 <__retarget_lock_acquire_recursive>
 8003928:	89bb      	ldrh	r3, [r7, #12]
 800392a:	071b      	lsls	r3, r3, #28
 800392c:	d502      	bpl.n	8003934 <_vfiprintf_r+0x38>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d113      	bne.n	800395c <_vfiprintf_r+0x60>
 8003934:	0039      	movs	r1, r7
 8003936:	9803      	ldr	r0, [sp, #12]
 8003938:	f000 f946 	bl	8003bc8 <__swsetup_r>
 800393c:	2800      	cmp	r0, #0
 800393e:	d00d      	beq.n	800395c <_vfiprintf_r+0x60>
 8003940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003942:	07db      	lsls	r3, r3, #31
 8003944:	d503      	bpl.n	800394e <_vfiprintf_r+0x52>
 8003946:	2001      	movs	r0, #1
 8003948:	4240      	negs	r0, r0
 800394a:	b021      	add	sp, #132	@ 0x84
 800394c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394e:	89bb      	ldrh	r3, [r7, #12]
 8003950:	059b      	lsls	r3, r3, #22
 8003952:	d4f8      	bmi.n	8003946 <_vfiprintf_r+0x4a>
 8003954:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003956:	f7ff f9dd 	bl	8002d14 <__retarget_lock_release_recursive>
 800395a:	e7f4      	b.n	8003946 <_vfiprintf_r+0x4a>
 800395c:	2300      	movs	r3, #0
 800395e:	ac08      	add	r4, sp, #32
 8003960:	6163      	str	r3, [r4, #20]
 8003962:	3320      	adds	r3, #32
 8003964:	7663      	strb	r3, [r4, #25]
 8003966:	3310      	adds	r3, #16
 8003968:	76a3      	strb	r3, [r4, #26]
 800396a:	9607      	str	r6, [sp, #28]
 800396c:	002e      	movs	r6, r5
 800396e:	7833      	ldrb	r3, [r6, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <_vfiprintf_r+0x7c>
 8003974:	2b25      	cmp	r3, #37	@ 0x25
 8003976:	d148      	bne.n	8003a0a <_vfiprintf_r+0x10e>
 8003978:	1b73      	subs	r3, r6, r5
 800397a:	9305      	str	r3, [sp, #20]
 800397c:	42ae      	cmp	r6, r5
 800397e:	d00b      	beq.n	8003998 <_vfiprintf_r+0x9c>
 8003980:	002a      	movs	r2, r5
 8003982:	0039      	movs	r1, r7
 8003984:	9803      	ldr	r0, [sp, #12]
 8003986:	f7ff ffa6 	bl	80038d6 <__sfputs_r>
 800398a:	3001      	adds	r0, #1
 800398c:	d100      	bne.n	8003990 <_vfiprintf_r+0x94>
 800398e:	e0ae      	b.n	8003aee <_vfiprintf_r+0x1f2>
 8003990:	6963      	ldr	r3, [r4, #20]
 8003992:	9a05      	ldr	r2, [sp, #20]
 8003994:	189b      	adds	r3, r3, r2
 8003996:	6163      	str	r3, [r4, #20]
 8003998:	7833      	ldrb	r3, [r6, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <_vfiprintf_r+0xa4>
 800399e:	e0a6      	b.n	8003aee <_vfiprintf_r+0x1f2>
 80039a0:	2201      	movs	r2, #1
 80039a2:	2300      	movs	r3, #0
 80039a4:	4252      	negs	r2, r2
 80039a6:	6062      	str	r2, [r4, #4]
 80039a8:	a904      	add	r1, sp, #16
 80039aa:	3254      	adds	r2, #84	@ 0x54
 80039ac:	1852      	adds	r2, r2, r1
 80039ae:	1c75      	adds	r5, r6, #1
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	60e3      	str	r3, [r4, #12]
 80039b4:	60a3      	str	r3, [r4, #8]
 80039b6:	7013      	strb	r3, [r2, #0]
 80039b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80039ba:	4b59      	ldr	r3, [pc, #356]	@ (8003b20 <_vfiprintf_r+0x224>)
 80039bc:	2205      	movs	r2, #5
 80039be:	0018      	movs	r0, r3
 80039c0:	7829      	ldrb	r1, [r5, #0]
 80039c2:	9305      	str	r3, [sp, #20]
 80039c4:	f7ff ff0c 	bl	80037e0 <memchr>
 80039c8:	1c6e      	adds	r6, r5, #1
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d11f      	bne.n	8003a0e <_vfiprintf_r+0x112>
 80039ce:	6822      	ldr	r2, [r4, #0]
 80039d0:	06d3      	lsls	r3, r2, #27
 80039d2:	d504      	bpl.n	80039de <_vfiprintf_r+0xe2>
 80039d4:	2353      	movs	r3, #83	@ 0x53
 80039d6:	a904      	add	r1, sp, #16
 80039d8:	185b      	adds	r3, r3, r1
 80039da:	2120      	movs	r1, #32
 80039dc:	7019      	strb	r1, [r3, #0]
 80039de:	0713      	lsls	r3, r2, #28
 80039e0:	d504      	bpl.n	80039ec <_vfiprintf_r+0xf0>
 80039e2:	2353      	movs	r3, #83	@ 0x53
 80039e4:	a904      	add	r1, sp, #16
 80039e6:	185b      	adds	r3, r3, r1
 80039e8:	212b      	movs	r1, #43	@ 0x2b
 80039ea:	7019      	strb	r1, [r3, #0]
 80039ec:	782b      	ldrb	r3, [r5, #0]
 80039ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80039f0:	d016      	beq.n	8003a20 <_vfiprintf_r+0x124>
 80039f2:	002e      	movs	r6, r5
 80039f4:	2100      	movs	r1, #0
 80039f6:	200a      	movs	r0, #10
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	7832      	ldrb	r2, [r6, #0]
 80039fc:	1c75      	adds	r5, r6, #1
 80039fe:	3a30      	subs	r2, #48	@ 0x30
 8003a00:	2a09      	cmp	r2, #9
 8003a02:	d950      	bls.n	8003aa6 <_vfiprintf_r+0x1aa>
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d111      	bne.n	8003a2c <_vfiprintf_r+0x130>
 8003a08:	e017      	b.n	8003a3a <_vfiprintf_r+0x13e>
 8003a0a:	3601      	adds	r6, #1
 8003a0c:	e7af      	b.n	800396e <_vfiprintf_r+0x72>
 8003a0e:	9b05      	ldr	r3, [sp, #20]
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	1ac0      	subs	r0, r0, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	4083      	lsls	r3, r0
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	0035      	movs	r5, r6
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	e7cc      	b.n	80039ba <_vfiprintf_r+0xbe>
 8003a20:	9b07      	ldr	r3, [sp, #28]
 8003a22:	1d19      	adds	r1, r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	9107      	str	r1, [sp, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db01      	blt.n	8003a30 <_vfiprintf_r+0x134>
 8003a2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a2e:	e004      	b.n	8003a3a <_vfiprintf_r+0x13e>
 8003a30:	425b      	negs	r3, r3
 8003a32:	60e3      	str	r3, [r4, #12]
 8003a34:	2302      	movs	r3, #2
 8003a36:	4313      	orrs	r3, r2
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	7833      	ldrb	r3, [r6, #0]
 8003a3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a3e:	d10c      	bne.n	8003a5a <_vfiprintf_r+0x15e>
 8003a40:	7873      	ldrb	r3, [r6, #1]
 8003a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a44:	d134      	bne.n	8003ab0 <_vfiprintf_r+0x1b4>
 8003a46:	9b07      	ldr	r3, [sp, #28]
 8003a48:	3602      	adds	r6, #2
 8003a4a:	1d1a      	adds	r2, r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	9207      	str	r2, [sp, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da01      	bge.n	8003a58 <_vfiprintf_r+0x15c>
 8003a54:	2301      	movs	r3, #1
 8003a56:	425b      	negs	r3, r3
 8003a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a5a:	4d32      	ldr	r5, [pc, #200]	@ (8003b24 <_vfiprintf_r+0x228>)
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	0028      	movs	r0, r5
 8003a60:	7831      	ldrb	r1, [r6, #0]
 8003a62:	f7ff febd 	bl	80037e0 <memchr>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d006      	beq.n	8003a78 <_vfiprintf_r+0x17c>
 8003a6a:	2340      	movs	r3, #64	@ 0x40
 8003a6c:	1b40      	subs	r0, r0, r5
 8003a6e:	4083      	lsls	r3, r0
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	3601      	adds	r6, #1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	7831      	ldrb	r1, [r6, #0]
 8003a7a:	2206      	movs	r2, #6
 8003a7c:	482a      	ldr	r0, [pc, #168]	@ (8003b28 <_vfiprintf_r+0x22c>)
 8003a7e:	1c75      	adds	r5, r6, #1
 8003a80:	7621      	strb	r1, [r4, #24]
 8003a82:	f7ff fead 	bl	80037e0 <memchr>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d040      	beq.n	8003b0c <_vfiprintf_r+0x210>
 8003a8a:	4b28      	ldr	r3, [pc, #160]	@ (8003b2c <_vfiprintf_r+0x230>)
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d122      	bne.n	8003ad6 <_vfiprintf_r+0x1da>
 8003a90:	2207      	movs	r2, #7
 8003a92:	9b07      	ldr	r3, [sp, #28]
 8003a94:	3307      	adds	r3, #7
 8003a96:	4393      	bics	r3, r2
 8003a98:	3308      	adds	r3, #8
 8003a9a:	9307      	str	r3, [sp, #28]
 8003a9c:	6963      	ldr	r3, [r4, #20]
 8003a9e:	9a04      	ldr	r2, [sp, #16]
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	6163      	str	r3, [r4, #20]
 8003aa4:	e762      	b.n	800396c <_vfiprintf_r+0x70>
 8003aa6:	4343      	muls	r3, r0
 8003aa8:	002e      	movs	r6, r5
 8003aaa:	2101      	movs	r1, #1
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	e7a4      	b.n	80039fa <_vfiprintf_r+0xfe>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	200a      	movs	r0, #10
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	6063      	str	r3, [r4, #4]
 8003aba:	7832      	ldrb	r2, [r6, #0]
 8003abc:	1c75      	adds	r5, r6, #1
 8003abe:	3a30      	subs	r2, #48	@ 0x30
 8003ac0:	2a09      	cmp	r2, #9
 8003ac2:	d903      	bls.n	8003acc <_vfiprintf_r+0x1d0>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0c8      	beq.n	8003a5a <_vfiprintf_r+0x15e>
 8003ac8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003aca:	e7c6      	b.n	8003a5a <_vfiprintf_r+0x15e>
 8003acc:	4341      	muls	r1, r0
 8003ace:	002e      	movs	r6, r5
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	1889      	adds	r1, r1, r2
 8003ad4:	e7f1      	b.n	8003aba <_vfiprintf_r+0x1be>
 8003ad6:	aa07      	add	r2, sp, #28
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	0021      	movs	r1, r4
 8003adc:	003a      	movs	r2, r7
 8003ade:	4b14      	ldr	r3, [pc, #80]	@ (8003b30 <_vfiprintf_r+0x234>)
 8003ae0:	9803      	ldr	r0, [sp, #12]
 8003ae2:	e000      	b.n	8003ae6 <_vfiprintf_r+0x1ea>
 8003ae4:	bf00      	nop
 8003ae6:	9004      	str	r0, [sp, #16]
 8003ae8:	9b04      	ldr	r3, [sp, #16]
 8003aea:	3301      	adds	r3, #1
 8003aec:	d1d6      	bne.n	8003a9c <_vfiprintf_r+0x1a0>
 8003aee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003af0:	07db      	lsls	r3, r3, #31
 8003af2:	d405      	bmi.n	8003b00 <_vfiprintf_r+0x204>
 8003af4:	89bb      	ldrh	r3, [r7, #12]
 8003af6:	059b      	lsls	r3, r3, #22
 8003af8:	d402      	bmi.n	8003b00 <_vfiprintf_r+0x204>
 8003afa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003afc:	f7ff f90a 	bl	8002d14 <__retarget_lock_release_recursive>
 8003b00:	89bb      	ldrh	r3, [r7, #12]
 8003b02:	065b      	lsls	r3, r3, #25
 8003b04:	d500      	bpl.n	8003b08 <_vfiprintf_r+0x20c>
 8003b06:	e71e      	b.n	8003946 <_vfiprintf_r+0x4a>
 8003b08:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003b0a:	e71e      	b.n	800394a <_vfiprintf_r+0x4e>
 8003b0c:	aa07      	add	r2, sp, #28
 8003b0e:	9200      	str	r2, [sp, #0]
 8003b10:	0021      	movs	r1, r4
 8003b12:	003a      	movs	r2, r7
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <_vfiprintf_r+0x234>)
 8003b16:	9803      	ldr	r0, [sp, #12]
 8003b18:	f7ff fb96 	bl	8003248 <_printf_i>
 8003b1c:	e7e3      	b.n	8003ae6 <_vfiprintf_r+0x1ea>
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	08004063 	.word	0x08004063
 8003b24:	08004069 	.word	0x08004069
 8003b28:	0800406d 	.word	0x0800406d
 8003b2c:	00000000 	.word	0x00000000
 8003b30:	080038d7 	.word	0x080038d7

08003b34 <_malloc_usable_size_r>:
 8003b34:	1f0b      	subs	r3, r1, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1f18      	subs	r0, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	da01      	bge.n	8003b42 <_malloc_usable_size_r+0xe>
 8003b3e:	580b      	ldr	r3, [r1, r0]
 8003b40:	18c0      	adds	r0, r0, r3
 8003b42:	4770      	bx	lr

08003b44 <__swbuf_r>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	0006      	movs	r6, r0
 8003b48:	000d      	movs	r5, r1
 8003b4a:	0014      	movs	r4, r2
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d004      	beq.n	8003b5a <__swbuf_r+0x16>
 8003b50:	6a03      	ldr	r3, [r0, #32]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <__swbuf_r+0x16>
 8003b56:	f7ff f87b 	bl	8002c50 <__sinit>
 8003b5a:	69a3      	ldr	r3, [r4, #24]
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	d502      	bpl.n	8003b6a <__swbuf_r+0x26>
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <__swbuf_r+0x3a>
 8003b6a:	0021      	movs	r1, r4
 8003b6c:	0030      	movs	r0, r6
 8003b6e:	f000 f82b 	bl	8003bc8 <__swsetup_r>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d003      	beq.n	8003b7e <__swbuf_r+0x3a>
 8003b76:	2501      	movs	r5, #1
 8003b78:	426d      	negs	r5, r5
 8003b7a:	0028      	movs	r0, r5
 8003b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	b2ef      	uxtb	r7, r5
 8003b84:	1ac0      	subs	r0, r0, r3
 8003b86:	6963      	ldr	r3, [r4, #20]
 8003b88:	b2ed      	uxtb	r5, r5
 8003b8a:	4283      	cmp	r3, r0
 8003b8c:	dc05      	bgt.n	8003b9a <__swbuf_r+0x56>
 8003b8e:	0021      	movs	r1, r4
 8003b90:	0030      	movs	r0, r6
 8003b92:	f7ff fceb 	bl	800356c <_fflush_r>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d1ed      	bne.n	8003b76 <__swbuf_r+0x32>
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60a3      	str	r3, [r4, #8]
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	701f      	strb	r7, [r3, #0]
 8003baa:	6963      	ldr	r3, [r4, #20]
 8003bac:	4283      	cmp	r3, r0
 8003bae:	d004      	beq.n	8003bba <__swbuf_r+0x76>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	07db      	lsls	r3, r3, #31
 8003bb4:	d5e1      	bpl.n	8003b7a <__swbuf_r+0x36>
 8003bb6:	2d0a      	cmp	r5, #10
 8003bb8:	d1df      	bne.n	8003b7a <__swbuf_r+0x36>
 8003bba:	0021      	movs	r1, r4
 8003bbc:	0030      	movs	r0, r6
 8003bbe:	f7ff fcd5 	bl	800356c <_fflush_r>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0d9      	beq.n	8003b7a <__swbuf_r+0x36>
 8003bc6:	e7d6      	b.n	8003b76 <__swbuf_r+0x32>

08003bc8 <__swsetup_r>:
 8003bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c80 <__swsetup_r+0xb8>)
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	0005      	movs	r5, r0
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	000c      	movs	r4, r1
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d004      	beq.n	8003be0 <__swsetup_r+0x18>
 8003bd6:	6a03      	ldr	r3, [r0, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <__swsetup_r+0x18>
 8003bdc:	f7ff f838 	bl	8002c50 <__sinit>
 8003be0:	220c      	movs	r2, #12
 8003be2:	5ea3      	ldrsh	r3, [r4, r2]
 8003be4:	071a      	lsls	r2, r3, #28
 8003be6:	d423      	bmi.n	8003c30 <__swsetup_r+0x68>
 8003be8:	06da      	lsls	r2, r3, #27
 8003bea:	d407      	bmi.n	8003bfc <__swsetup_r+0x34>
 8003bec:	2209      	movs	r2, #9
 8003bee:	602a      	str	r2, [r5, #0]
 8003bf0:	2240      	movs	r2, #64	@ 0x40
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	4240      	negs	r0, r0
 8003bfa:	e03a      	b.n	8003c72 <__swsetup_r+0xaa>
 8003bfc:	075b      	lsls	r3, r3, #29
 8003bfe:	d513      	bpl.n	8003c28 <__swsetup_r+0x60>
 8003c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c02:	2900      	cmp	r1, #0
 8003c04:	d008      	beq.n	8003c18 <__swsetup_r+0x50>
 8003c06:	0023      	movs	r3, r4
 8003c08:	3344      	adds	r3, #68	@ 0x44
 8003c0a:	4299      	cmp	r1, r3
 8003c0c:	d002      	beq.n	8003c14 <__swsetup_r+0x4c>
 8003c0e:	0028      	movs	r0, r5
 8003c10:	f7ff fe02 	bl	8003818 <_free_r>
 8003c14:	2300      	movs	r3, #0
 8003c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c18:	2224      	movs	r2, #36	@ 0x24
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	2300      	movs	r3, #0
 8003c22:	6063      	str	r3, [r4, #4]
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	2308      	movs	r3, #8
 8003c2a:	89a2      	ldrh	r2, [r4, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	6923      	ldr	r3, [r4, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <__swsetup_r+0x86>
 8003c36:	21a0      	movs	r1, #160	@ 0xa0
 8003c38:	2280      	movs	r2, #128	@ 0x80
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	0089      	lsls	r1, r1, #2
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	400b      	ands	r3, r1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <__swsetup_r+0x86>
 8003c46:	0021      	movs	r1, r4
 8003c48:	0028      	movs	r0, r5
 8003c4a:	f000 f845 	bl	8003cd8 <__smakebuf_r>
 8003c4e:	220c      	movs	r2, #12
 8003c50:	5ea3      	ldrsh	r3, [r4, r2]
 8003c52:	2101      	movs	r1, #1
 8003c54:	001a      	movs	r2, r3
 8003c56:	400a      	ands	r2, r1
 8003c58:	420b      	tst	r3, r1
 8003c5a:	d00b      	beq.n	8003c74 <__swsetup_r+0xac>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60a2      	str	r2, [r4, #8]
 8003c60:	6962      	ldr	r2, [r4, #20]
 8003c62:	4252      	negs	r2, r2
 8003c64:	61a2      	str	r2, [r4, #24]
 8003c66:	2000      	movs	r0, #0
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	4282      	cmp	r2, r0
 8003c6c:	d101      	bne.n	8003c72 <__swsetup_r+0xaa>
 8003c6e:	061a      	lsls	r2, r3, #24
 8003c70:	d4be      	bmi.n	8003bf0 <__swsetup_r+0x28>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	0799      	lsls	r1, r3, #30
 8003c76:	d400      	bmi.n	8003c7a <__swsetup_r+0xb2>
 8003c78:	6962      	ldr	r2, [r4, #20]
 8003c7a:	60a2      	str	r2, [r4, #8]
 8003c7c:	e7f3      	b.n	8003c66 <__swsetup_r+0x9e>
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	20000018 	.word	0x20000018

08003c84 <__swhatbuf_r>:
 8003c84:	b570      	push	{r4, r5, r6, lr}
 8003c86:	000e      	movs	r6, r1
 8003c88:	001d      	movs	r5, r3
 8003c8a:	230e      	movs	r3, #14
 8003c8c:	5ec9      	ldrsh	r1, [r1, r3]
 8003c8e:	0014      	movs	r4, r2
 8003c90:	b096      	sub	sp, #88	@ 0x58
 8003c92:	2900      	cmp	r1, #0
 8003c94:	da0c      	bge.n	8003cb0 <__swhatbuf_r+0x2c>
 8003c96:	89b2      	ldrh	r2, [r6, #12]
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	4019      	ands	r1, r3
 8003c9e:	421a      	tst	r2, r3
 8003ca0:	d114      	bne.n	8003ccc <__swhatbuf_r+0x48>
 8003ca2:	2380      	movs	r3, #128	@ 0x80
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	6029      	str	r1, [r5, #0]
 8003caa:	6023      	str	r3, [r4, #0]
 8003cac:	b016      	add	sp, #88	@ 0x58
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	466a      	mov	r2, sp
 8003cb2:	f000 f8ad 	bl	8003e10 <_fstat_r>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	dbed      	blt.n	8003c96 <__swhatbuf_r+0x12>
 8003cba:	23f0      	movs	r3, #240	@ 0xf0
 8003cbc:	9901      	ldr	r1, [sp, #4]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	4019      	ands	r1, r3
 8003cc2:	4b04      	ldr	r3, [pc, #16]	@ (8003cd4 <__swhatbuf_r+0x50>)
 8003cc4:	18c9      	adds	r1, r1, r3
 8003cc6:	424b      	negs	r3, r1
 8003cc8:	4159      	adcs	r1, r3
 8003cca:	e7ea      	b.n	8003ca2 <__swhatbuf_r+0x1e>
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2340      	movs	r3, #64	@ 0x40
 8003cd0:	e7e9      	b.n	8003ca6 <__swhatbuf_r+0x22>
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	ffffe000 	.word	0xffffe000

08003cd8 <__smakebuf_r>:
 8003cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cda:	2602      	movs	r6, #2
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	0005      	movs	r5, r0
 8003ce0:	000c      	movs	r4, r1
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	4233      	tst	r3, r6
 8003ce6:	d007      	beq.n	8003cf8 <__smakebuf_r+0x20>
 8003ce8:	0023      	movs	r3, r4
 8003cea:	3347      	adds	r3, #71	@ 0x47
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	6123      	str	r3, [r4, #16]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6163      	str	r3, [r4, #20]
 8003cf4:	b005      	add	sp, #20
 8003cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf8:	ab03      	add	r3, sp, #12
 8003cfa:	aa02      	add	r2, sp, #8
 8003cfc:	f7ff ffc2 	bl	8003c84 <__swhatbuf_r>
 8003d00:	9f02      	ldr	r7, [sp, #8]
 8003d02:	9001      	str	r0, [sp, #4]
 8003d04:	0039      	movs	r1, r7
 8003d06:	0028      	movs	r0, r5
 8003d08:	f7ff f9ae 	bl	8003068 <_malloc_r>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d108      	bne.n	8003d22 <__smakebuf_r+0x4a>
 8003d10:	220c      	movs	r2, #12
 8003d12:	5ea3      	ldrsh	r3, [r4, r2]
 8003d14:	059a      	lsls	r2, r3, #22
 8003d16:	d4ed      	bmi.n	8003cf4 <__smakebuf_r+0x1c>
 8003d18:	2203      	movs	r2, #3
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	431e      	orrs	r6, r3
 8003d1e:	81a6      	strh	r6, [r4, #12]
 8003d20:	e7e2      	b.n	8003ce8 <__smakebuf_r+0x10>
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	89a2      	ldrh	r2, [r4, #12]
 8003d26:	6020      	str	r0, [r4, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	6120      	str	r0, [r4, #16]
 8003d30:	6167      	str	r7, [r4, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <__smakebuf_r+0x78>
 8003d36:	0028      	movs	r0, r5
 8003d38:	230e      	movs	r3, #14
 8003d3a:	5ee1      	ldrsh	r1, [r4, r3]
 8003d3c:	f000 f840 	bl	8003dc0 <_isatty_r>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d005      	beq.n	8003d50 <__smakebuf_r+0x78>
 8003d44:	2303      	movs	r3, #3
 8003d46:	89a2      	ldrh	r2, [r4, #12]
 8003d48:	439a      	bics	r2, r3
 8003d4a:	3b02      	subs	r3, #2
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	81a3      	strh	r3, [r4, #12]
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	9a01      	ldr	r2, [sp, #4]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	81a3      	strh	r3, [r4, #12]
 8003d58:	e7cc      	b.n	8003cf4 <__smakebuf_r+0x1c>

08003d5a <_raise_r>:
 8003d5a:	b570      	push	{r4, r5, r6, lr}
 8003d5c:	0004      	movs	r4, r0
 8003d5e:	000d      	movs	r5, r1
 8003d60:	291f      	cmp	r1, #31
 8003d62:	d904      	bls.n	8003d6e <_raise_r+0x14>
 8003d64:	2316      	movs	r3, #22
 8003d66:	6003      	str	r3, [r0, #0]
 8003d68:	2001      	movs	r0, #1
 8003d6a:	4240      	negs	r0, r0
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
 8003d6e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <_raise_r+0x24>
 8003d74:	008a      	lsls	r2, r1, #2
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2a00      	cmp	r2, #0
 8003d7c:	d108      	bne.n	8003d90 <_raise_r+0x36>
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f000 f842 	bl	8003e08 <_getpid_r>
 8003d84:	002a      	movs	r2, r5
 8003d86:	0001      	movs	r1, r0
 8003d88:	0020      	movs	r0, r4
 8003d8a:	f000 f82b 	bl	8003de4 <_kill_r>
 8003d8e:	e7ed      	b.n	8003d6c <_raise_r+0x12>
 8003d90:	2a01      	cmp	r2, #1
 8003d92:	d009      	beq.n	8003da8 <_raise_r+0x4e>
 8003d94:	1c51      	adds	r1, r2, #1
 8003d96:	d103      	bne.n	8003da0 <_raise_r+0x46>
 8003d98:	2316      	movs	r3, #22
 8003d9a:	6003      	str	r3, [r0, #0]
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	e7e5      	b.n	8003d6c <_raise_r+0x12>
 8003da0:	2100      	movs	r1, #0
 8003da2:	0028      	movs	r0, r5
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	4790      	blx	r2
 8003da8:	2000      	movs	r0, #0
 8003daa:	e7df      	b.n	8003d6c <_raise_r+0x12>

08003dac <raise>:
 8003dac:	b510      	push	{r4, lr}
 8003dae:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <raise+0x10>)
 8003db0:	0001      	movs	r1, r0
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f7ff ffd1 	bl	8003d5a <_raise_r>
 8003db8:	bd10      	pop	{r4, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	20000018 	.word	0x20000018

08003dc0 <_isatty_r>:
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	4d06      	ldr	r5, [pc, #24]	@ (8003de0 <_isatty_r+0x20>)
 8003dc6:	0004      	movs	r4, r0
 8003dc8:	0008      	movs	r0, r1
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	f000 f84a 	bl	8003e64 <_isatty>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d103      	bne.n	8003ddc <_isatty_r+0x1c>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d000      	beq.n	8003ddc <_isatty_r+0x1c>
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	2000028c 	.word	0x2000028c

08003de4 <_kill_r>:
 8003de4:	2300      	movs	r3, #0
 8003de6:	b570      	push	{r4, r5, r6, lr}
 8003de8:	4d06      	ldr	r5, [pc, #24]	@ (8003e04 <_kill_r+0x20>)
 8003dea:	0004      	movs	r4, r0
 8003dec:	0008      	movs	r0, r1
 8003dee:	0011      	movs	r1, r2
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	f000 f83f 	bl	8003e74 <_kill>
 8003df6:	1c43      	adds	r3, r0, #1
 8003df8:	d103      	bne.n	8003e02 <_kill_r+0x1e>
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d000      	beq.n	8003e02 <_kill_r+0x1e>
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	2000028c 	.word	0x2000028c

08003e08 <_getpid_r>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	f000 f823 	bl	8003e54 <_getpid>
 8003e0e:	bd10      	pop	{r4, pc}

08003e10 <_fstat_r>:
 8003e10:	2300      	movs	r3, #0
 8003e12:	b570      	push	{r4, r5, r6, lr}
 8003e14:	4d06      	ldr	r5, [pc, #24]	@ (8003e30 <_fstat_r+0x20>)
 8003e16:	0004      	movs	r4, r0
 8003e18:	0008      	movs	r0, r1
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	f000 f811 	bl	8003e44 <_fstat>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	d103      	bne.n	8003e2e <_fstat_r+0x1e>
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d000      	beq.n	8003e2e <_fstat_r+0x1e>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	2000028c 	.word	0x2000028c

08003e34 <_close>:
 8003e34:	2258      	movs	r2, #88	@ 0x58
 8003e36:	2001      	movs	r0, #1
 8003e38:	4b01      	ldr	r3, [pc, #4]	@ (8003e40 <_close+0xc>)
 8003e3a:	4240      	negs	r0, r0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	4770      	bx	lr
 8003e40:	2000028c 	.word	0x2000028c

08003e44 <_fstat>:
 8003e44:	2258      	movs	r2, #88	@ 0x58
 8003e46:	2001      	movs	r0, #1
 8003e48:	4b01      	ldr	r3, [pc, #4]	@ (8003e50 <_fstat+0xc>)
 8003e4a:	4240      	negs	r0, r0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	4770      	bx	lr
 8003e50:	2000028c 	.word	0x2000028c

08003e54 <_getpid>:
 8003e54:	2258      	movs	r2, #88	@ 0x58
 8003e56:	2001      	movs	r0, #1
 8003e58:	4b01      	ldr	r3, [pc, #4]	@ (8003e60 <_getpid+0xc>)
 8003e5a:	4240      	negs	r0, r0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	4770      	bx	lr
 8003e60:	2000028c 	.word	0x2000028c

08003e64 <_isatty>:
 8003e64:	2258      	movs	r2, #88	@ 0x58
 8003e66:	4b02      	ldr	r3, [pc, #8]	@ (8003e70 <_isatty+0xc>)
 8003e68:	2000      	movs	r0, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	2000028c 	.word	0x2000028c

08003e74 <_kill>:
 8003e74:	2258      	movs	r2, #88	@ 0x58
 8003e76:	2001      	movs	r0, #1
 8003e78:	4b01      	ldr	r3, [pc, #4]	@ (8003e80 <_kill+0xc>)
 8003e7a:	4240      	negs	r0, r0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	4770      	bx	lr
 8003e80:	2000028c 	.word	0x2000028c

08003e84 <_lseek>:
 8003e84:	2258      	movs	r2, #88	@ 0x58
 8003e86:	2001      	movs	r0, #1
 8003e88:	4b01      	ldr	r3, [pc, #4]	@ (8003e90 <_lseek+0xc>)
 8003e8a:	4240      	negs	r0, r0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	4770      	bx	lr
 8003e90:	2000028c 	.word	0x2000028c

08003e94 <_read>:
 8003e94:	2258      	movs	r2, #88	@ 0x58
 8003e96:	2001      	movs	r0, #1
 8003e98:	4b01      	ldr	r3, [pc, #4]	@ (8003ea0 <_read+0xc>)
 8003e9a:	4240      	negs	r0, r0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	4770      	bx	lr
 8003ea0:	2000028c 	.word	0x2000028c

08003ea4 <_sbrk>:
 8003ea4:	4a05      	ldr	r2, [pc, #20]	@ (8003ebc <_sbrk+0x18>)
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	d101      	bne.n	8003eb2 <_sbrk+0xe>
 8003eae:	4904      	ldr	r1, [pc, #16]	@ (8003ec0 <_sbrk+0x1c>)
 8003eb0:	6011      	str	r1, [r2, #0]
 8003eb2:	6810      	ldr	r0, [r2, #0]
 8003eb4:	18c3      	adds	r3, r0, r3
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	20000290 	.word	0x20000290
 8003ec0:	20000298 	.word	0x20000298

08003ec4 <_write>:
 8003ec4:	2258      	movs	r2, #88	@ 0x58
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	4b01      	ldr	r3, [pc, #4]	@ (8003ed0 <_write+0xc>)
 8003eca:	4240      	negs	r0, r0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4770      	bx	lr
 8003ed0:	2000028c 	.word	0x2000028c

08003ed4 <_exit>:
 8003ed4:	e7fe      	b.n	8003ed4 <_exit>
 8003ed6:	0000      	movs	r0, r0
 8003ed8:	656d6974 	.word	0x656d6974
 8003edc:	6d65742c 	.word	0x6d65742c
 8003ee0:	6f762c70 	.word	0x6f762c70
 8003ee4:	0a0d746c 	.word	0x0a0d746c
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	2c756c25 	.word	0x2c756c25
 8003ef0:	252c6425 	.word	0x252c6425
 8003ef4:	000a0d64 	.word	0x000a0d64
 8003ef8:	20212121 	.word	0x20212121
 8003efc:	54535953 	.word	0x54535953
 8003f00:	45204d45 	.word	0x45204d45
 8003f04:	524f5252 	.word	0x524f5252
 8003f08:	21212120 	.word	0x21212120
 8003f0c:	00000a0d 	.word	0x00000a0d
 8003f10:	20212121 	.word	0x20212121
 8003f14:	20574f4c 	.word	0x20574f4c
 8003f18:	544c4f56 	.word	0x544c4f56
 8003f1c:	20454741 	.word	0x20454741
 8003f20:	4e524157 	.word	0x4e524157
 8003f24:	20474e49 	.word	0x20474e49
 8003f28:	20212121 	.word	0x20212121
 8003f2c:	00000a0d 	.word	0x00000a0d
 8003f30:	20212121 	.word	0x20212121
 8003f34:	5245564f 	.word	0x5245564f
 8003f38:	4d455420 	.word	0x4d455420
 8003f3c:	41524550 	.word	0x41524550
 8003f40:	45525554 	.word	0x45525554
 8003f44:	21212120 	.word	0x21212120
 8003f48:	000a0d20 	.word	0x000a0d20

08003f4c <AHBPrescTable>:
	...
 8003f54:	04030201 09080706                       ........

08003f5c <APBPrescTable>:
 8003f5c:	00000000 04030201                       ........

08003f64 <PLLMulTable>:
 8003f64:	08060403 2018100c 00000030 080023de     ....... 0....#..
 8003f74:	080023e8 0800241c 08002444 08002432     .#...$..D$..2$..
 8003f84:	08002444 08002444 08002444 0800243c     D$..D$..D$..<$..
 8003f94:	080024ea 080024f4 080024fe 08002526     .$...$...$..&%..
 8003fa4:	08002514 08002526 08002526 08002526     .%..&%..&%..&%..
 8003fb4:	0800251e 4e454552 616d2054 636f6c6c     .%..REENT malloc
 8003fc4:	63757320 64656563 2f006465 6c697562      succeeded./buil
 8003fd4:	6e672f64 6f742d75 2d736c6f 2d726f66     d/gnu-tools-for-
 8003fe4:	336d7473 33315f32 722e332e 2e316c65     stm32_13.3.rel1.
 8003ff4:	34323032 36323930 3137312d 72732f35     20240926-1715/sr
 8004004:	656e2f63 62696c77 77656e2f 2f62696c     c/newlib/newlib/
 8004014:	6362696c 6474732f 2f62696c 646e6172     libc/stdlib/rand
 8004024:	2c00632e 6e756620 6f697463 00203a6e     .c., function: .
 8004034:	65737361 6f697472 2522206e 66202273     assertion "%s" f
 8004044:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
 8004054:	696c202c 2520656e 25732564 23000a73     , line %d%s%s..#
 8004064:	202b302d 4c6c6800 67666500 00474645     -0+ .hlL.efgEFG.
 8004074:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8004084:	32313000 36353433 61393837 65646362     .0123456789abcde
 8004094:	00000066                                f...

08004098 <_init>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr

080040a4 <_fini>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr
